<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一言、今日诗词API的调用</title>
    <url>/API-hetokoto-and-jinrishici/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>常言道：“良言一句三冬暖，恶语伤人六月寒”。</p>
<a id="more"></a>

<h2 id="一言"><a href="#一言" class="headerlink" title="一言"></a>一言</h2><p><a href="https://hitokoto.cn/">一言</a> 创立于 2016 年，隶属于萌创团队，目前网站主要提供一句话服务。</p>
<p>动漫也好、小说也好、网络也好，不论在哪里，我们总会看到有那么一两个句子能穿透你的心。我们把这些句子汇聚起来，形成一言网络，以传递更多的感动。如果可以，我们希望我们没有停止服务的那一天。</p>
<p>简单来说，一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。 或是感动，或是开心，有或是单纯的回忆。来到这里，留下你所喜欢的那一句句话，与大家分享，这就是一言存在的目的。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>在.html或.md文件中加入以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;hitokoto&quot;</span>&gt;</span>获取中...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>如图本博客侧边栏下方一样。</p>
<h2 id="今日诗词"><a href="#今日诗词" class="headerlink" title="今日诗词"></a>今日诗词</h2><p><a href="https://www.jinrishici.com/">今日诗词</a> 是一个诗词实时智能推荐的网站。根据不同地点、时间、节日、季节、天气、景观、城市进行智能推荐。</p>
<h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><ol>
<li><p>引入CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 诗 */</span></span><br><span class="line"><span class="selector-class">.poem-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">730px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#797979</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: none;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">80px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-wrap</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#797979</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-wrap</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#797979</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-wrap</span> <span class="selector-tag">p</span><span class="selector-id">#poem</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-wrap</span> <span class="selector-tag">p</span><span class="selector-id">#info</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-border</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">27%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#797979</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-right</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poem-left</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">685px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.poem-border</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">18%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.poem-wrap</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#797979</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.poem-wrap</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">6px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.poem-border</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在.html或.md文件中加入以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;poem-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;poem-border poem-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;poem-border poem-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>念两句诗<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;poem&quot;</span>&gt;</span>挑选中...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">            jinrishici.load(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line">                poem.innerHTML = result.data.content</span><br><span class="line"><span class="javascript">                info.innerHTML = <span class="string">&#x27;【&#x27;</span> + result.data.origin.dynasty + <span class="string">&#x27;】&#x27;</span> + result.data.origin.author + <span class="string">&#x27;《&#x27;</span> + result.data.origin.title + <span class="string">&#x27;》&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;poem&quot;</span>).value(poem);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;info&quot;</span>).value(info);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="1.png"></p>
]]></content>
      <categories>
        <category>诗词API</category>
      </categories>
      <tags>
        <tag>一言</tag>
        <tag>今日诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 安装 VNC</title>
    <url>/CentOS-install-VNC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote class="blockquote-center">
<p>CentOS 安装 VNC</p>

</blockquote>

<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CentOS，是基于 Red Hat Linux 提供的可自由使用源代码的企业级 Linux 发行版本，是一个稳定、可预测、可管理和可复制的免费企业级计算平台。</p>
<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ol>
<li>换源。</li>
<li>安装桌面。</li>
<li>安装 VNC Server。</li>
</ol>
<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>

<h3 id="改源"><a href="#改源" class="headerlink" title="改源"></a>改源</h3><p>CentOS 6</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line">或者</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<p>CentOS 7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">或者</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<p>CentOS 8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">或者</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>

<h3 id="生成缓存"><a href="#生成缓存" class="headerlink" title="生成缓存"></a>生成缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>非阿里云ECS用户会出现 <code>Couldn&#39;t resolve host &#39;mirrors.cloud.aliyuncs.com&#39;</code> 信息，不影响使用。用户也可自行修改相关配置：eg：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;/mirrors.cloud.aliyuncs.com/d&#x27;</span> -e <span class="string">&#x27;/mirrors.aliyuncs.com/d&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>

<h2 id="安装桌面"><a href="#安装桌面" class="headerlink" title="安装桌面"></a>安装桌面</h2><h3 id="查询可以批量安装的软件列表"><a href="#查询可以批量安装的软件列表" class="headerlink" title="查询可以批量安装的软件列表"></a>查询可以批量安装的软件列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum grouplist</span><br></pre></td></tr></table></figure>

<h3 id="安装-GNOME-Desktop"><a href="#安装-GNOME-Desktop" class="headerlink" title="安装 GNOME Desktop"></a>安装 GNOME Desktop</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum groupinstall -y <span class="string">&quot;GNOME Desktop&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置默认启动方式"><a href="#设置默认启动方式" class="headerlink" title="设置默认启动方式"></a>设置默认启动方式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">###设置成图形模式</span></span><br><span class="line">systemctl set-default graphical.target</span><br><span class="line"><span class="comment">###设置成命令模式</span></span><br><span class="line">systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure>

<h3 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>



<h2 id="安装VNC-Server"><a href="#安装VNC-Server" class="headerlink" title="安装VNC  Server"></a>安装VNC  Server</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install tigervnc-server -y</span><br></pre></td></tr></table></figure>

<h3 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep tigervnc-server</span><br></pre></td></tr></table></figure>

<h3 id="创建-VNC-连接脚本"><a href="#创建-VNC-连接脚本" class="headerlink" title="创建 VNC 连接脚本"></a>创建 VNC 连接脚本</h3><p>vncserver@:1.service中的：1代表“桌面号”，启动的端口号为“5900+桌面号”，即是5901，以此类推</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure>

<h3 id="编辑-VNC-连接脚本"><a href="#编辑-VNC-连接脚本" class="headerlink" title="编辑 VNC 连接脚本"></a>编辑 VNC 连接脚本</h3><p>找到其中的 <code>&lt;USER&gt;</code> ，改成自己的用户名，如果是root用户登录桌面就使用root用户，如果使用普通用户登录桌面则使用普通用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/vncserver@1.service</span><br></pre></td></tr></table></figure>

<p><img src="1.png"></p>
<h3 id="重启-systemd"><a href="#重启-systemd" class="headerlink" title="重启 systemd"></a>重启 systemd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h3 id="设置-VNC-密码"><a href="#设置-VNC-密码" class="headerlink" title="设置 VNC 密码"></a>设置 VNC 密码</h3><p>切换到刚刚配置文件设置的用户，执行，输入两次密码，输入完成后提示是否设置view-only password（”View-only password”密码，只允许查看，无控制权限）这个可设可不设</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">vncpasswd</span><br></pre></td></tr></table></figure>

<h3 id="（可选）"><a href="#（可选）" class="headerlink" title="（可选）"></a>（可选）</h3><p>ECS不允许开启SELinux服务和NetworkManager服务（阿里云主机默认不开启）。如果你开启了这些服务，运行以下命令修改配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line"><span class="comment">###检查SELinux服务，如果SELinux对应的值不是disable，必须改为disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭NetworkManager服务</span></span><br><span class="line">chkconfig --del NetworkManager</span><br></pre></td></tr></table></figure>

<h3 id="设置开机自动"><a href="#设置开机自动" class="headerlink" title="设置开机自动"></a>设置开机自动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> vncserver@:1.service</span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start vncserver@:1.service</span><br></pre></td></tr></table></figure>

<h3 id="确认是否启动"><a href="#确认是否启动" class="headerlink" title="确认是否启动"></a>确认是否启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep vnc</span><br></pre></td></tr></table></figure>

<p>如果返回以下类似结果，说明服务已经启动</p>
<p><img src="2.png"></p>
<h3 id="放行-TCP-5901-端口"><a href="#放行-TCP-5901-端口" class="headerlink" title="放行 TCP 5901 端口"></a>放行 TCP 5901 端口</h3><p><img src="3.png"></p>
<h3 id="下载-VNC-Viewer-连接"><a href="#下载-VNC-Viewer-连接" class="headerlink" title="下载 VNC Viewer 连接"></a>下载 VNC Viewer 连接</h3><p><img src="4.png"></p>
]]></content>
      <categories>
        <category>CentOS</category>
        <category>VNC</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>VNC</tag>
      </tags>
  </entry>
  <entry>
    <title>Crack-JetBrains</title>
    <url>/Crack-JetBrains/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol>
<li>到 <a href="https://www.jetbrains.com/">官网</a> 下载你想要安装的软件。</li>
<li>下载补丁。</li>
<li>打开JetBrains软件，**”Help” -&gt; “Edit Custom VM Options …”**。</li>
<li>在末尾添加 <code>-javaagent:/&lt;jetbrains-agent.jar的路径&gt;</code></li>
</ol>
]]></content>
      <categories>
        <category>Crack</category>
      </categories>
      <tags>
        <tag>Crack</tag>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>Crack-Navicat</title>
    <url>/Crack-Navicat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Navicat 是一套快速、可靠并价格相当便宜的数据库管理工具，专为简化数据库的管理及降低系统管理成本而设。它的设计符合数据库管理员、开发人员及中小企业的需要。Navicat 是以直觉化的图形用户界面而建的，让你可以以安全并且简单的方式创建、组织、访问并共用信息。</p>
<a id="more"></a>

<ol>
<li><p>在 <a href="https://www.navicat.com.cn/">官网</a> 下载安装包并安装。</p>
</li>
<li><p>打开 navicat_keygen_patch_v5.5_by_dfox.exe 。</p>
<div class="note danger"><p><strong>注意版本选择</strong><br>Patch: <font color=red>Backup、Host、Navicat v 15</font><br>License. <font color=red>Product and Language: Enterprise、Premium、Simplified Chinese</font><br>Resale License: <font color=red>Site license</font></p>
</div>

<p><img src="1.jpg"></p>
</li>
<li><p>点击右上角的 <strong>patch</strong>，选择 Navicat 安装目录下的 navicat.exe。</p>
</li>
<li><p>输入 <strong>Your Name</strong> 和 <strong>Your Organization</strong>，点击 <strong>Generate</strong>。</p>
<p><img src="2.jpg"></p>
</li>
<li><p>打开 <strong>navicat</strong> ，输入注册码，选择 <strong>手动激活</strong>。</p>
</li>
<li><p>复制请求码到注册机中的 <strong>Request Code</strong>，点击 <strong>Activation Code</strong> 中的 <strong>Generate</strong> 生成激活码。</p>
</li>
<li><p>复制激活码到 <strong>navicat</strong> 中，点击 <strong>激活</strong>，提示 <strong>Navicat 现已激活</strong>。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Crack</category>
      </categories>
      <tags>
        <tag>Crack</tag>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>OkHttp</title>
    <url>/OkHttp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>HTTP 是现代应用常用的一种交换数据和媒体的网络方式，高效地使用 HTTP 能让资源加载更快，节省带宽。</p>
<a id="more"></a>

<p>OkHttp 是一个高效的 HTTP 客户端，它有以下特性：</p>
<ul>
<li>支持 HTTP/2，允许对同一主机的所有请求共享一个socket连接</li>
<li>减少连接池的请求延迟（如果HTTP/2不可用）</li>
<li>透明的 GZIP 缩小了下载大小</li>
<li>响应缓存内容，避免重复的请求</li>
</ul>
<p>当网络出现问题时，OkHttp 会坚持不懈：它将从常见的连接问题中静默恢复。如果您的服务具有多个 IP 地址，则在第一次连接失败时，OkHttp 将尝试使用备用地址。这对 IPv4 + IPv6 和冗余数据中心中托管的服务是必需的。OkHttp 支持现代 TLS 功能（TLS 1.3，ALPN，证书固定）。可以将其配置为回退以获得广泛的连接性。</p>
<p>使用 OkHttp 很容易。它的请求/响应 API 具有流畅的构建器和不变性。它支持同步阻塞调用和带有回调的异步调用。</p>
<h2 id="Get-a-URL"><a href="#Get-a-URL" class="headerlink" title="Get a URL"></a>Get a URL</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">      .url(url)</span><br><span class="line">      .build();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.body().string();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Post-to-a-Server"><a href="#Post-to-a-Server" class="headerlink" title="Post to a Server"></a>Post to a Server</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType JSON</span><br><span class="line">    = MediaType.get(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">post</span><span class="params">(String url, String json)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  RequestBody body = RequestBody.create(json, JSON);</span><br><span class="line">  Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">      .url(url)</span><br><span class="line">      .post(body)</span><br><span class="line">      .build();</span><br><span class="line">  <span class="keyword">try</span> (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.body().string();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OkHttp</category>
      </categories>
      <tags>
        <tag>OkHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>Gson 的使用</title>
    <url>/Usag-Gson/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>GSON 弥补了 json 的许多不足的地方，在实际应用中更加适用于 Java 开发。在这里，我们主要讲解的是利用 GSON 来操作 Java 对象和 json 数据之间的相互转换，包括了常见的对象序列化和反序列化的知识。</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>json 有两种类型：</p>
<ul>
<li>对象类型，object -&gt; {key:value,keyy:value,…}</li>
<li>数组类型，array -&gt; [value,value,…]</li>
</ul>
<p>GSON 在解析 json 的时候，主要有两种类型：</p>
<ul>
<li>直接在内存中生成 object 或 array，通过手工指定 key 来获取值。</li>
<li>借助 javabean 来进行映射获取值。</li>
</ul>
<h1 id="对-json-数据进行反序列化，得到-Java-对象"><a href="#对-json-数据进行反序列化，得到-Java-对象" class="headerlink" title="对 json 数据进行反序列化，得到 Java 对象"></a>对 json 数据进行反序列化，得到 Java 对象</h1><h2 id="不借助-Java-类，直接解析-json-数据"><a href="#不借助-Java-类，直接解析-json-数据" class="headerlink" title="不借助 Java 类，直接解析 json 数据"></a>不借助 Java 类，直接解析 json 数据</h2><div class="tabs" id="fourth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-unique-name-1">json 是对象类型</a></li><li class="tab"><a href="#fourth-unique-name-2">json 是数组类型</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-unique-name-1"><p>当 ajax 传过来的 json 数据属于对象时，不论这个对象简单还是复杂，都可以轻松地把它们给解析出来。</p>
<p>ajax 传过来的 json 数据是对象类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data_json =  &#123;</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;hobby&quot;</span>:[<span class="string">&quot;baskte&quot;</span>,<span class="string">&quot;tennis&quot;</span>],</span><br><span class="line">        <span class="string">&quot;introduce&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>:<span class="string">&quot;tom&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span>:<span class="number">23</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">data: <span class="built_in">JSON</span>.stringify(data_json),</span><br></pre></td></tr></table></figure>

<p>GSON 解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader reader = request.getReader();</span><br><span class="line">    <span class="comment">// 读取json数据</span></span><br><span class="line">    StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">while</span> ((s = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        buffer.append(s);</span><br><span class="line">    &#125;</span><br><span class="line">    String json = buffer.toString();</span><br><span class="line">    System.out.println(<span class="string">&quot;json:&quot;</span> + json);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// json解析器，解析json数据</span></span><br><span class="line">    JsonParser parser = <span class="keyword">new</span> JsonParser();</span><br><span class="line">    JsonElement element = parser.parse(json);</span><br><span class="line">    <span class="comment">// json属于对象类型时</span></span><br><span class="line">    <span class="keyword">if</span> (element.isJsonObject()) &#123;  </span><br><span class="line">        JsonObject object = element.getAsJsonObject();  <span class="comment">// 转化为对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. value为string时，取出string</span></span><br><span class="line">        String sex = object.get(<span class="string">&quot;sex&quot;</span>).getAsString();</span><br><span class="line">        System.out.println(<span class="string">&quot;sex:&quot;</span> + sex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. value为array时，取出array</span></span><br><span class="line">        JsonArray hobbies = object.getAsJsonArray(<span class="string">&quot;hobby&quot;</span>);  <span class="comment">// </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hobbies.size(); i++) &#123;</span><br><span class="line">            String hobby = hobbies.get(i).getAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;hobby:&quot;</span> + hobby);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. value为object时，取出object</span></span><br><span class="line">        JsonObject introduce = object.getAsJsonObject(<span class="string">&quot;introduce&quot;</span>);</span><br><span class="line">        String name = introduce.get(<span class="string">&quot;name&quot;</span>).getAsString();</span><br><span class="line">        <span class="keyword">int</span> age = introduce.get(<span class="string">&quot;age&quot;</span>).getAsInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name+<span class="string">&quot;;age:&quot;</span> + age);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<div class="note danger"><p><strong>解读</strong> 对于传过来的对象类型的 json 数据，使用 GSON 是很方便进行解析的，在得到了 json 数据对应的 <code>JsonObject</code> 对象之后，我们就可以很简单地进行操作了。这种方法是直接获取 json 中的值，而没有进行 java 对象的还原（简单情况下，没有必要生成相应的 javabean）。</p>
</div></div><div class="tab-pane" id="fourth-unique-name-2"><p>ajax 传过来的 json 数据是数组类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data_json =  [</span><br><span class="line">    <span class="string">&quot;cake&quot;</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    &#123;<span class="string">&quot;brother&quot;</span>:<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;sister&quot;</span>:<span class="string">&quot;lucy&quot;</span>&#125;,</span><br><span class="line">    [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">data: <span class="built_in">JSON</span>.stringify(data_json),</span><br></pre></td></tr></table></figure>

<p>GSON 解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader reader = request.getReader();</span><br><span class="line">    StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">while</span> ((s = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        buffer.append(s);</span><br><span class="line">    &#125;</span><br><span class="line">    String json = buffer.toString();</span><br><span class="line">    System.out.println(<span class="string">&quot;json:&quot;</span>+json);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// json解析器，解析json数据</span></span><br><span class="line">    JsonParser parser = <span class="keyword">new</span> JsonParser();</span><br><span class="line">    JsonElement element = parser.parse(json);</span><br><span class="line">    <span class="comment">// json属于数组类型</span></span><br><span class="line">    <span class="keyword">if</span> (element.isJsonArray()) &#123;  </span><br><span class="line">        JsonArray array = element.getAsJsonArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. value为string时，取出string</span></span><br><span class="line">        String array_1 = array.get(<span class="number">0</span>).getAsString();</span><br><span class="line">        System.out.println(<span class="string">&quot;array_1:&quot;</span>+array_1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. value为int时，取出int</span></span><br><span class="line">        <span class="keyword">int</span> array_2 = array.get(<span class="number">1</span>).getAsInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;array_2:&quot;</span>+array_2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. value为object时，取出object</span></span><br><span class="line">        JsonObject array_3 = array.get(<span class="number">2</span>).getAsJsonObject();</span><br><span class="line">        String brother = array_3.get(<span class="string">&quot;brother&quot;</span>).getAsString();</span><br><span class="line">        String sister = array_3.get(<span class="string">&quot;sister&quot;</span>).getAsString();</span><br><span class="line">        System.out.println(<span class="string">&quot;brother:&quot;</span>+brother+<span class="string">&quot;;sister:&quot;</span>+sister);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. value为array时，取出array</span></span><br><span class="line">        JsonArray array_4 = array.get(<span class="number">3</span>).getAsJsonArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array_4.size(); i++) &#123;</span><br><span class="line">        System.out.println(array_4.get(i).getAsString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<details class="note "><summary><p>dange</p>
</summary>
<p><strong>解读</strong> 当 json 是数组类型的时候，使用 GSON 操作和上一小节几乎差不多，只不过是第一步生成的 json 对象是数组而已。上面 2 种方式解析 json 十分简单，在日常使用中足够了。</p>
<p>但是对于有规律的json数据，比如往往是可以映射成一个javabean对象，那么我们就没有必要一个个手工取值了，我们可以借助javabean配合GSON来更加快速地解析json数据。</p>

</details></div></div></div>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Gson</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>导入本地 JAR 包到 MAVEN 中</title>
    <url>/add-maven-local-dependency/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>众所周知，MAVEN 能够让我们更好地管理依赖，但是有时候无法从远程仓库下载我们所需的 JAR 包，因此，本篇文章来学习如何导入本地 JAR 包到 MAVEN 中。</p>
<a id="more"></a>

<ol>
<li><p>准备你想导入的 jar 包。</p>
</li>
<li><p>准备所需的内容。</p>
<ul>
<li>jar 包的位置</li>
<li>groupId（分组）</li>
<li>artifactId（名称）</li>
<li>version（版本）</li>
</ul>
</li>
<li><p>替换命令中的 <strong>&lt;jar包的位置&gt;、&lt;groupId&gt;、&lt;artifactId&gt;、&lt;version&gt;</strong> 并运行命令以导入本地 jar 包到 maven 中。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn install:<span class="built_in">install-file</span> <span class="literal">-Dfile</span>=&lt;jar包的位置&gt; <span class="literal">-DgroupId</span>=&lt;groupId&gt; <span class="literal">-DartifactId</span>=&lt;artifactId&gt; <span class="literal">-Dversion</span>=&lt;version&gt; <span class="literal">-Dpackaging</span>=jar</span><br></pre></td></tr></table></figure>

<p><img src="1.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>MAVEN</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 美化</title>
    <url>/beautify-Ubuntu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote class="blockquote-center">
<p>Ubuntu 美化</p>

</blockquote>

<a id="more"></a>

<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ol>
<li>安装 Ubuntu。</li>
<li>美化 Ubuntu。</li>
</ol>
<h2 id="安装-Ubuntu"><a href="#安装-Ubuntu" class="headerlink" title="安装 Ubuntu"></a>安装 Ubuntu</h2><p>到 <a href="https://ubuntu.com/download/desktop">官网</a> 下载并安装 Ubuntu。</p>
<h2 id="美化-Ubuntu"><a href="#美化-Ubuntu" class="headerlink" title="美化 Ubuntu"></a>美化 Ubuntu</h2><ol>
<li><p>安装扩展。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-shell-extensions</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <a href="https://extensions.gnome.org/">官方插件</a> 里面找到自己想要的插件并安装。</p>
</li>
<li><p>在 <a href="https://www.gnome-look.org/">GNOME LOOK</a> 下载并解压自己喜欢的主题和图标到指定位置。</p>
<div class="note info"><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>   <strong>主题存放目录</strong> /usr/share/themes</p>
<p>   <strong>图标存放目录</strong> /usr/share/icons</p>
</div>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建 Aria2</title>
    <url>/build-Aria2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>aria2 是一个轻量级的多协议多源命令行下载工具。它支持 HTTP/HTTPS、FTP、SFTP、BitTorrent 和 Metalink。可以通过内置的 JSON-RPC 和 XML-RPC 接口操作 aria2。</p>
<a id="more"></a>

<h2 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h2><ol>
<li><p>下载 <a href="http://aria2c.com/archiver/aria2.zip">Windows设置懒人包</a> 并解压到 D:\Aria2。</p>
</li>
<li><p>下载 <a href="https://github.com/aria2/aria2/releases">Aria2程序</a> ，解压替换 D:Aria2 中的 aria2.exe。</p>
<p><img src="1.png"></p>
</li>
<li><p>文件说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Aria2Data     # 下载目录 默认下载文件会保存在这里</span><br><span class="line">aria2.conf    # 配置文件 可以自己根据说明修改</span><br><span class="line">aria2.exe     # 启动文件 使用这个来启动 aria2</span><br><span class="line">aria2.session # 任务保存文件 未完成任务会保存在这里</span><br><span class="line">aria2c.exe    # 命令行主程序</span><br><span class="line">README.md     # README</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件 aria2.conf。</p>
<ul>
<li><p>默认下载目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置</span></span><br><span class="line">dir=Aria2Data</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务器默认连接数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同一服务器连接数, 添加时可指定, 默认:1</span></span><br><span class="line">max-connection-per-server=16</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启 BT 下载设置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用RPC, 默认:false</span></span><br><span class="line">enable-rpc=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 本地节点查找, PT需要禁用, 默认:false</span></span><br><span class="line">bt-enable-lpd=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 种子交换, PT需要禁用, 默认:true</span></span><br><span class="line">enable-peer-exchange=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 BT trackers</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bt-tracker 更新，解决Aria2 BT下载速度慢没速度的问题</span></span><br><span class="line">bt-tracker=udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.leechers-paradise.org:6969/announce,udp://tracker.opentrackr.org:1337/announce,udp://p4p.arenabg.com:1337/announce,udp://9.rarbg.to:2710/announce,udp://9.rarbg.me:2710/announce,udp://tracker.openbittorrent.com:80/announce,udp://exodus.desync.com:6969/announce,udp://tracker.tiny-vps.com:6969/announce,udp://retracker.lanta-net.ru:2710/announce,udp://open.stealth.si:80/announce,udp://tracker.moeking.me:6969/announce,udp://denis.stalker.upeer.me:6969/announce,udp://tracker.torrent.eu.org:451/announce,udp://tracker.cyberia.is:6969/announce,udp://open.demonii.si:1337/announce,udp://ipv4.tracker.harry.lu:80/announce,udp://explodie.org:6969/announce,udp://xxxtor.com:2710/announce,udp://valakas.rollo.dnsabr.com:2710/announce</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>开始下载</p>
<p>Aria2 没有软件页面，可以使用命令行执行任务，下面介绍普通用户如何使用。</p>
<p><a href="http://aria2c.com/">点击这里</a> 打开操作页面。</p>
</li>
</ol>
<h2 id="进阶设置"><a href="#进阶设置" class="headerlink" title="进阶设置"></a>进阶设置</h2><ol>
<li><p>使用 Web UI。</p>
<p>AriaNg 和传统下载软件界面类似，中文版界面，使用无压力，如果报错的话，记得修改服务器地址。</p>
<p><img src="2.png"></p>
</li>
<li><p>安装 Chrome 插件 - Aria2 for Chrome，用 Aria2 接管 Chrome 的下载。</p>
</li>
<li><p>添加 BT Tracker。</p>
<p>这里推荐几个自动更新的 Tracker 列表 –&gt; <a href="/bt/">传送门</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>Aria2</tag>
        <tag>BT</tag>
        <tag>DHC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客的搭建</title>
    <url>/build-Hexo-blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<a id="more"></a>

<h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>安装 Hexo 相当简单，只需要先安装下列应用即可：</p>
<ul>
<li><a href="https://nodejs.org/en/">Node.js</a></li>
<li><a href="https://git-scm.com/">Git</a></li>
</ul>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure>

<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装玩 Hexo 后，请执行下列命令，Hexo 将会在指定文件夹中新建所需的文件。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹的命录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml		# 网站配置信息</span><br><span class="line">├── package.json	# 应用程序的信息</span><br><span class="line">├── scaffolds		# 模板文件夹</span><br><span class="line">├── source		# 资源文件夹</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes		# 主题文件夹</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>您可以在 <strong>_config.yml</strong> 中修改大部分的配置。</p>
<ul>
<li><p>网站</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>网址标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td>description</td>
<td>网站描述</td>
</tr>
<tr>
<td>keyworks</td>
<td>网站的关键词</td>
</tr>
<tr>
<td>author</td>
<td>您的名字</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言</td>
</tr>
<tr>
<td>timezone</td>
<td>网站时区</td>
</tr>
</tbody></table>
</li>
<li><p>网址</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>网址</td>
<td></td>
</tr>
<tr>
<td>root</td>
<td>网站根目录</td>
<td></td>
</tr>
<tr>
<td>permalink</td>
<td>文章的 <strong>永久链接</strong> 格式</td>
<td>:year/:month/:day/:title</td>
</tr>
<tr>
<td>permalink_defaults</td>
<td>永久链接中的默认值</td>
<td></td>
</tr>
<tr>
<td>pretty_urls</td>
<td>改写 <strong>permalink</strong> 的值来美化 URL</td>
<td></td>
</tr>
<tr>
<td>pretty_urls.trailing_index</td>
<td>是否在永久链接中保留尾部的 index.html，设置为 false 时去除</td>
<td>true</td>
</tr>
<tr>
<td>pretty_urls.trailing_html</td>
<td>是否在永久链接中保留尾部的 .html，设置为 false 时去除（对尾部的 index.html 无效）</td>
<td>true</td>
</tr>
</tbody></table>
</li>
</ul>
<ul>
<li><p>目录</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>source_dir</td>
<td>资源文件夹，这个文件夹用来存放内容。</td>
<td>source</td>
</tr>
<tr>
<td>public_dir</td>
<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>
<td>public</td>
</tr>
<tr>
<td>tag_dir</td>
<td>标签文件夹</td>
<td>tags</td>
</tr>
<tr>
<td>archive_dir</td>
<td>归档文件夹</td>
<td>archives</td>
</tr>
<tr>
<td>category_dir</td>
<td>分类文件夹</td>
<td>categories</td>
</tr>
<tr>
<td>code_dir</td>
<td>Include code文件夹，source_dir下的子目录</td>
<td>downloads/code</td>
</tr>
<tr>
<td>i18n_dir</td>
<td>国际化（i18n）文件夹</td>
<td>:lang</td>
</tr>
<tr>
<td>skip_render</td>
<td>跳过指定文件的渲染。匹配到的文件将不会被不做地复制到public目录中，您可以使用 <strong>glob表达式</strong> 来匹配路径。</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>文章</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>new_post_name</td>
<td>新文章的文件名称</td>
<td>:title.md</td>
</tr>
<tr>
<td>default_layout</td>
<td>预设布局</td>
<td>post</td>
</tr>
<tr>
<td>auto_spacing</td>
<td>在中文和英文之间加入空格</td>
<td>false</td>
</tr>
<tr>
<td>titlecase</td>
<td>把标题转换为 title case</td>
<td>false</td>
</tr>
<tr>
<td>external_link</td>
<td>在新标签中打开链接</td>
<td>true</td>
</tr>
<tr>
<td>external_link.enable</td>
<td>在新标签中打开链接</td>
<td>true</td>
</tr>
<tr>
<td>external_link.field</td>
<td>对整个网站（site）生效或仅对文章（post）生效</td>
<td>site</td>
</tr>
<tr>
<td>external_link.exclude</td>
<td>需要排除的域名。主域名和子域名如 www 需分别配置</td>
<td>[]</td>
</tr>
<tr>
<td>filename_case</td>
<td>把文件名称转换为（1）小写或（2）大写</td>
<td>0</td>
</tr>
<tr>
<td>render_drafts</td>
<td>显示草稿</td>
<td>false</td>
</tr>
<tr>
<td>post_asset_floder</td>
<td>启动 <strong>Asset 文件夹</strong></td>
<td>false</td>
</tr>
<tr>
<td>relative_link</td>
<td>把链接修改为与根目录的相对地址</td>
<td>false</td>
</tr>
<tr>
<td>future</td>
<td>显示未来的文章</td>
<td>true</td>
</tr>
<tr>
<td>highlight</td>
<td>代码块的设置</td>
<td></td>
</tr>
<tr>
<td>highlight.enable</td>
<td>开启代码块高亮</td>
<td>true</td>
</tr>
<tr>
<td>highlight.auto_detect</td>
<td>如果未指定用于，则启用自动检测</td>
<td>false</td>
</tr>
<tr>
<td>highlight.line_number</td>
<td>显示行数</td>
<td>true</td>
</tr>
<tr>
<td>highlight.tab_replace</td>
<td>用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</td>
<td>‘’</td>
</tr>
<tr>
<td>highlight.wrap</td>
<td>Wrap the code block in &lt;table&gt;</td>
<td>true</td>
</tr>
<tr>
<td>highlight.hljs</td>
<td>Use the hljs-* prefix for CSS classes</td>
<td>false</td>
</tr>
</tbody></table>
</li>
<li><p>分类 &amp; 标签</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>default_category</td>
<td>默认分类</td>
<td>uncategorized</td>
</tr>
<tr>
<td>category_map</td>
<td>分类别名</td>
<td></td>
</tr>
<tr>
<td>tag_map</td>
<td>标签别名</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>日期 / 时间格式</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>date-format</td>
<td>日期格式</td>
<td>YYYY-MM-DD</td>
</tr>
<tr>
<td>time-format</td>
<td>时间格式</td>
<td>HH:mm:ss</td>
</tr>
<tr>
<td>use_date_for_updated</td>
<td>启用以后，如果 Front Matter 中没有指定 updated，post.updated 将会使用 date 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用</td>
<td>true</td>
</tr>
</tbody></table>
</li>
<li><p>分页</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>per_page</td>
<td>每页显示的文章量（0=关闭分页功能）</td>
<td>10</td>
</tr>
<tr>
<td>pagination_dir</td>
<td>分页目录</td>
<td>page</td>
</tr>
</tbody></table>
</li>
<li><p>扩展</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>theme</td>
<td>当前主题名称。值为 <strong>false</strong> 时禁用主题</td>
</tr>
<tr>
<td>theme_config</td>
<td>主题的配置文件。在这里放置的配置文件将会覆盖主题目录下的 _config.yml中的配置</td>
</tr>
<tr>
<td>deploy</td>
<td>部署部分的设置</td>
</tr>
<tr>
<td>meta_generator</td>
<td><strong>Meta generator</strong> 标签。值为 <strong>false</strong> 时 Hexo 不会在头部插入该标签</td>
</tr>
</tbody></table>
</li>
<li><p>包括或不包含目录和文件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>include</td>
<td>Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和.开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</td>
</tr>
<tr>
<td>exclude</td>
<td>Hexo 会忽略这些文件和目录</td>
</tr>
<tr>
<td>ignore</td>
<td>Ignore files/floders</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ol>
<li>下载 <a href="https://hexo.io/themes/">主题</a></li>
<li>在 Hexo 的根目录下 <strong>_config.yml</strong> 中修改 <code>theme: &lt;你下载的主题名字&gt;</code></li>
</ol>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>运行以下命令启动 Hexo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>打开 <a href="http://localhost:4000/">localhost:4000</a> 访问 <strong>Hexo</strong>。</p>
<h2 id="部署-Hexo-到-GitHub"><a href="#部署-Hexo-到-GitHub" class="headerlink" title="部署 Hexo 到 GitHub"></a>部署 Hexo 到 GitHub</h2><ol>
<li><p>新建一个名为 <font color=red>&lt;GitHub用户名&gt;.github.io</font> 的存储库。</p>
</li>
<li><p>配置 SSH Key。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&#x27;你的Github注册邮箱&#x27;</span></span><br><span class="line">git config -<span class="literal">-global</span> user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config -<span class="literal">-global</span> user.email <span class="string">&quot;你的Github注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开用户目录，复制 <strong>.ssh\id_rsa.pub</strong> 文件里面的内容，打开 Github 主页，进入 <strong>Settings -&gt; SSH and GPG keys -&gt; New SSH key</strong>，title 随便写，粘贴 key。</p>
</li>
<li><p>测试 SSH。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github	# 注意邮箱地址不用改</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装插件 hexo-deployer-git。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 <strong>_config.yml</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;project&gt;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行以下代码部署 Hexo 到 GitHub。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览 <strong>&lt;GitHub用户名&gt;.github.io</strong>，查看网站是否运行。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>部署 LNMP 环境</title>
    <url>/build-LNMP-environment/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本教程介绍如何手动在 ECS 实例上搭建LNMP环境（CentOS 8），其中 LNMP 分别代表Linux、Nginx、MySQL 和 PHP。</p>
<a id="more"></a>

<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>已注册阿里云账号。如还未注册，请先完成 <a href="https://account.aliyun.com/register/register.htm">账号注册</a>。</li>
<li>已完成实名认证。如还未认证，请先完成 <a href="https://account.console.aliyun.com/v2/#/authc/types">实名认证</a>。</li>
<li>已创建 ECS 实例并为实例分配公网 IP 地址，具体操作请参见 <a href="https://help.aliyun.com/document_detail/108442.html#concept-nx2-nzv-wgb">创建方式导航</a>。</li>
<li>已在实例安全组的入方向添加安全组规则并放行 80 端口。具体操作请参见 <a href="https://help.aliyun.com/document_detail/25471.html#concept-sm5-2wz-xdb">添加安全组规则</a>。</li>
</ul>
<h2 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h2><p>CentOS 8 版本的操作系统中默认安装了 DNF 软件包管理器，是 YUM 软件包管理器的下一代版本。您可以在 CentOS 8 系统中运行 <strong>dnf</strong> 命令获取相关的使用说明。</p>
<p>本教程适用于熟悉 Linux 操作系统，刚开始使用阿里云进行建站的个人用户。</p>
<p>您也可以在 <a href="https://market.aliyun.com/software">云市场</a> 购买 LNMP 镜像直接启动 ECS 实例，以便快速建站。</p>
<p>本篇教程在示例步骤中使用了以下配置的 ECS 实例，实例规格为 ecs.c6.large。实际操作时，请以您的实例配置为准。</p>
<ul>
<li>CPU：2 vCPU</li>
<li>内存：4GiB</li>
<li>网络类型：专有网络VPC</li>
<li>IP地址：公网IP</li>
</ul>
<h2 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h2><p>操作系统及软件版本如下所示。当您使用不同软件版本时，可能需要根据实际情况调整命令和参数配置。</p>
<ul>
<li>操作系统：公共镜像 CentOS 8.1 64位</li>
<li>Nginx版本：Nginx 1.16.1</li>
<li>MySQL版本：MySQL 8.0.17</li>
<li>PHP版本：PHP 7.3.5</li>
</ul>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li>准备编译环境</li>
<li>安装 Nginx</li>
<li>安装 MySQL</li>
<li>安装 PHP</li>
<li>配置 Nginx</li>
<li>配置 MySQL</li>
<li>配置 PHP</li>
<li>测试访问 LNMP 平台</li>
<li>后续步骤</li>
</ol>
<h2 id="准备编译环境"><a href="#准备编译环境" class="headerlink" title="准备编译环境"></a>准备编译环境</h2><ol>
<li><p>远程连接 Linux 实例。</p>
</li>
<li><p>关闭防火墙。</p>
<ol>
<li><p>运行 <code>systemctl status firewalld</code> 命令查看当前防火墙的状态。</p>
<p><img src="1.png"></p>
<ul>
<li>如果防火墙的状态参数是 inactive，则防火墙为关闭状态。</li>
<li>如果防火墙的状态参数是 active，则防火墙为开启状态。本示例中防火墙为开启状态，因此需要关闭防火墙。</li>
</ul>
</li>
<li><p>关闭防火墙。如果防火墙为关闭状态可以忽略此步骤。</p>
<ul>
<li><p>如果您想临时关闭防火墙，运行命令 <code>systemctl stop firewalld</code>。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这只是暂时关闭防火墙，下次重启 Linux 后，防火墙还会开启。</p>
</div>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>如果您想永久关闭防火墙，运行命令 <code>systemctl disable firewalld</code>。</p>
   <div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>如果您想重新开启防火墙，请参见 <a href="https://firewalld.org/?spm=a2c4g.11186623.2.28.5e0923bfXFEI8o">firewalld官网信息</a>。</p>
</div>
</li>
</ul>
</li>
<li><p>关闭 SELinux。</p>
<ol>
<li><p>运行 <code>getenforce</code> 命令查看 SELinux 的当前状态。</p>
<p><img src="2.png"></p>
<ul>
<li>如果 SELinux 状态参数是 Disabled，则 SELinux 为关闭状态。</li>
<li>如果 SELinux 状态参数是 Enforcing，则 SELinux 为开启状态。本示例中 SELinux 为开启状态，因此需要关闭 SELinux。</li>
</ul>
</li>
<li><p>关闭 SELinux。如果 SELinux 为关闭状态可以忽略此步骤。</p>
<ul>
<li><p>如果您想临时关闭 SELinux，运行命令 <code>setenforce 0</code>。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这只是暂时关闭 SELinux，下次重启 Linux 后，SELinux 还会开启。</p>
</div>
</li>
<li><p>如果您想永久关闭 SELinux，运行命令 <code>vim /etc/selinux/config</code> 编辑 SELinux 配置文件。回车后，把光标移动到 <em>SELINUX=enforcing</em> 这一行，按 <code>i</code> 键进入编辑模式，修改为 <em>SELINUX=disabled</em>，按 <code>Esc</code> 键，然后输入 <code>:wq</code> 并按 <code>Enter</code> 键以保存并关闭 SELinux 配置文件。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>如果您想重新开启 SELinux，请参见 <a href="https://help.aliyun.com/document_detail/157022.html#task-2385075">开启或关闭SELinux</a>。</p>
</div>
</li>
</ul>
</li>
<li><p>重启系统使设置生效。</p>
</li>
</ol>
</li>
</ol>
<h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><ol>
<li><p>运行以下命令安装 Nginx。<br> 本教程将选用 Nginx 1.16.1 版本。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>您可以访问 <a href="http://nginx.org/packages/centos/8/x86_64/RPMS/">Nginx官方安装包</a> 获取适用于 CentOS 8 系统的多版本的 Nginx 安装包。</p>
</div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf -y install http://nginx.org/packages/centos/8/x86_64/RPMS/nginx-1.16.1-1.el8.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令查看 Nginx 版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure>

<p>查看版本结果如下所示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx version: nginx/1.16.1</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><ol>
<li><p>运行以下命令安装 MySQL。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf -y install @mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令查看 MySQL 版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure>

<p>查看版本结果如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql  Ver 8.0.17 for Linux on x86_64 (Source distribution)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><ol>
<li><p>运行以下命令添加并更新 epel 源。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf -y install epel-release</span><br><span class="line">dnf update epel-release</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令删除缓存的无用软件包并更新源。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf clean all</span><br><span class="line">dnf makecache</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用 <code>php:7.3</code> 模块。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本示例使用 <code>php:7.3</code> 版本。如果您需要使用<code>PHP 7.4</code>版本，需要先安装 remi 源。remi 源安装命令为 <code>dnf -y install https://rpms.remirepo.net/enterprise/remi-release-8.rpm</code>。</p>
</div>
</li>
<li><p>运行以下命令安装 PHP 相应的模块。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf install php php-curl php-dom php-exif php-fileinfo php-fpm php-gd php-hash php-json php-mbstring php-mysqli php-openssl php-pcre php-xml libsodium</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令查看 PHP 版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure>

<p>查看版本结果如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PHP 7.3.5 (cli) (built: Apr 30 2019 08:37:17) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.3.5, Copyright (c) 1998-2018 Zend Technologies</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><ol>
<li><p>运行以下命令查看 Nginx 配置文件的默认路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>在 <em>http</em> 大括号内，查看 <em>include</em> 配置项。即配置文件的默认路径。</p>
<p><img src="3.png"></p>
</li>
<li><p>在配置文件的默认路径下，备份默认配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/nginx/conf.d</span><br><span class="line">cp default.conf default.conf.bak</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件。</p>
<ol>
<li><p>运行以下命令打开默认配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi default.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>按 <code>i</code> 进入编辑模式。</p>
</li>
<li><p>在 <em>location</em> 大括号内，修改以下内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    #将该路径替换为您的网站根目录。</span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">    #添加默认首页信息index.php。</span><br><span class="line">    index  index.html index.htm index.php;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>去掉被注释的 <em>location ~ .php$</em> 大括号前面的 *#*，并修改大括号的内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    #将该路径替换为您的网站根目录。</span><br><span class="line">    root           /usr/share/nginx/html;</span><br><span class="line">    #Nginx通过unix套接字与PHP-FPM建立联系，该配置与/etc/php-fpm.d/www.conf文件内的listen配置一致。</span><br><span class="line">    fastcgi_pass   unix:/run/php-fpm/www.sock;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    #将/scripts$fastcgi_script_name修改为$document_root$fastcgi_script_name。</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">    #Nginx调用fastcgi接口处理PHP请求。</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Nginx 与 PHP-FPM 进程间通信方式有两种。</p>
<ul>
<li>TCP Socket：该方式能通过网络，可用于跨服务器通信的场景。</li>
<li>UNIX Domain Socket：该方式不能通过网络，只能用于同一服务器中通信的场景。</li>
</ul>
</div>
</li>
<li><p>按下 <code>Esc</code> 键，并输入 <code>:wq</code> 保存退出文件。</p>
</li>
</ol>
</li>
<li><p>运行以下命令启动 Nginx 服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令设置 Nginx 服务框架自启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h2><ol>
<li><p>运行以下命令启动 MySQL，并设置为开机自启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable --now mysqld</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令查看 MySQL 是否已启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<p>查看返回结果，<code>Active: active (running)</code> 表示已启动。</p>
</li>
<li><p>运行以下命令执行 MySQL 安全性操作并设置密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p>运行命令后，根据命令行提示执行如下操作。</p>
<ol>
<li><p>输入 <code>Y</code> 并回车开始相关配置。</p>
</li>
<li><p>选择密码验证策略强度，输入 <code>2</code> 并回车。<br>策略 <code>0</code> 表示低，策略 <code>2</code> 表示中，策略 <code>3</code> 表示高。建议您选择高强度的密码验证策略。</p>
</li>
<li><p>设置 MySQL 的新密码并确认。</p>
<p>本示例设置密码 <code>PASSword123</code>。</p>
</li>
<li><p>输入 <code>Y</code> 并回车继续使用提供的密码。</p>
</li>
<li><p>输入 <code>Y</code> 并回车移除匿名用户。</p>
</li>
<li><p>设置是否允许远程连接 MySQL。</p>
<ul>
<li>不需要远程连接时，输入 <code>Y</code> 并回车。</li>
<li>需要远程连接时，输入 <code>N</code> 或其他任意非 <code>Y</code> 的按键，并回车。</li>
</ul>
</li>
<li><p>输入 <code>Y</code> 并回车删除 test 库以及对 test 库的访问权限。</p>
</li>
<li><p>输入 <code>Y</code> 并回车重新加载授权表。</p>
</li>
</ol>
</li>
</ol>
<h2 id="配置-PHP"><a href="#配置-PHP" class="headerlink" title="配置 PHP"></a>配置 PHP</h2><ol>
<li><p>修改 PHP 配置文件。</p>
<ol>
<li><p>运行以下命令打开配置文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>按 <code>i</code> 进入编辑模式。</p>
</li>
<li><p>找到 <code>user = apache</code> 和 <code>group = apache</code>，将 <code>apache</code> 修改为 <code>nginx</code>。</p>
<p><img src="4.png"></p>
</li>
<li><p>按下 <code>Esc</code> 键，并输入 <code>:wq</code> 保存并退出文件。</p>
</li>
</ol>
</li>
<li><p>新建 phpinfo.php 文件，用于展示 PHP 信息。</p>
<ol>
<li><p>运行以下命令新建文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim &lt;网站根目录&gt;/phpinfo.php  #将&lt;网站根目录&gt;替换为您配置的网站根目录。</span><br></pre></td></tr></table></figure>

<p>网站根目录是您在 <code>nginx.conf</code> 文件中 <code>location ~ .php$</code> 大括号内配置的 <code>root</code> 值，如下图所示。</p>
<p><img src="5.png"></p>
<p>本教程配置的网站根目录为 <code>/usr/share/nginx.html</code>，因此命令为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/share/nginx/html/phpinfo.php</span><br></pre></td></tr></table></figure>
</li>
<li><p>按 <code>i</code> 进入编辑模式。</p>
</li>
<li><p>输入下列内容，函数 <code>phpinfo()</code> 会展示 PHP 的所有配置信息。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>按下 <code>Esc</code> 键后，输入 <code>:wq</code> 并回车以保存并关闭配置文件。</p>
</li>
</ol>
</li>
<li><p>运行以下命令启动 PHP-FPM。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start php-fpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令设置 PHP-FPM 开机自启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable php-fpm</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="测试访问-LNMP-平台"><a href="#测试访问-LNMP-平台" class="headerlink" title="测试访问 LNMP 平台"></a>测试访问 LNMP 平台</h2><ol>
<li><p>在本地物理机打开浏览器。</p>
</li>
<li><p>在地址栏输入 <code>http://&lt;ECS实例公网IP地址&gt;/phpinfo.php</code>。<br>返回结果如下图所示，表示LNMP环境部署成功。</p>
<p><img src="6.png"></p>
</li>
</ol>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p>测试访问 LNMP 平台成功后，建议您运行以下命令将 phpinfo.php 文件删除，消除安全隐患。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf &lt;网站根目录&gt;/phpinfo.php   #将&lt;网站根目录&gt;替换为您在nginx.conf中配置的网站根目录</span><br></pre></td></tr></table></figure>

<p>本教程配置的网站根目录为 /usr/share/nginx/html，因此命令为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/share/nginx/html/phpinfo.php</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建 SSR 节点</title>
    <url>/build-SSR-nodes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote class="blockquote-center">
<p>从零开始搭建 SSR 节点</p>

</blockquote>

<a id="more"></a>

<ol>
<li><p>通过 ssh 连接主机。</p>
</li>
<li><p>安装脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></table></figure>

<p>出现如下图所示的管理界面后，输入数字 <code>1</code> 来安装 SSR 客户端。</p>
<div class="note danger"><p><strong>注意</strong> 如果不能进入下一步，请输入 <code>bash ssr.sh</code> 再重新安装。</p>
</div>

<p><img src="1.png"></p>
<p>依次输入自己想设置的端口和密码，然后回车。</p>
<p><img src="2.png"></p>
<p>选择想设置的加密方式，如 <code>10</code>。</p>
<p><img src="3.png"></p>
<p>选择协议插件。</p>
<p><img src="4.png"></p>
<p>是否选择兼容原版（SS客户端），可以根据需求进行选择，原则上不推荐使用SS客户端。</p>
<p><img src="5.png"></p>
<p>混淆插件的设置。</p>
<p><img src="6.png"></p>
<p>依次设置设备数、单线程限速和端口总限速，默认不限制，个人使用的话，默认即可。</p>
<p><img src="7.png"></p>
<p>提示下载文件，输入 <code>y</code>。</p>
<p><img src="8.png"></p>
<p>部署完成。</p>
<p><img src="9.png"></p>
<p>SSR 账号的配置信息。</p>
<p><img src="10.png"></p>
<div class="note danger"><p><strong>注意</strong> 如果你想修改账号信息，输入 <code>bash ssr.sh</code> 进入管理界面，设置相应的数字进行修改。</p>
</div>

<p><img src="11.png"></p>
<p><img src="12.png"></p>
</li>
<li><p>连接 SSR 节点。</p>
<p><img src="13.png"></p>
<ul>
<li>复制 SSR 链接，导入SSR客户端。</li>
<li>复制 SSR 二维码并用浏览器打开，再用客户端扫描导入。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title>跳过 Google 的开机向导</title>
    <url>/bypass-Google-validation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Android 刷机在刷了 Gapps 之后，在开机进入系统时会进入 Gapps 的开机引导。</p>
<a id="more"></a>

<h2 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h2><p>更改 <code>USER_SETUP_COMPLETE</code> 和 <code>DEVICE_PROVISIONED</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell settings put secure user_setup_complete 1</span><br><span class="line">adb shell settings put global device_provisioned 1</span><br></pre></td></tr></table></figure>

<h2 id="TWRP"><a href="#TWRP" class="headerlink" title="TWRP"></a>TWRP</h2><p>在 twrp 的终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/dev/block/bootdevice/by-name/frp</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷机</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>刷机</tag>
      </tags>
  </entry>
  <entry>
    <title>提取 Wallpaper Engine 的壁纸</title>
    <url>/extract-Wallpaper-Engine/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote class="blockquote-center">
<p>提取 Wallpaper Engine 的壁纸</p>

</blockquote>

<a id="more"></a>

<ol>
<li><p>下载并解压 wallpaper engine extract。</p>
</li>
<li><p>文件说明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── 00						# 提取后的目录</span><br><span class="line">├── readme.txt				 # 操作信息</span><br><span class="line">├── RePKG.exe				 # 提取程序</span><br><span class="line">├── THIRD-PARTY-NOTICES.txt</span><br><span class="line">├── 刷新工作区.bat			 # 清除提取目录以及待提取的文件</span><br><span class="line">└── 提取文件.bat			  # 提取文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作流程。</p>
<ol>
<li>将 scene.pkg 文件放入此文件夹。</li>
<li>点击 提取文件.bat。</li>
<li>在生成的 00 文件夹中找到所需的图片（一般在 meterial 文件夹中）。</li>
<li>点击 刷新工作区.bat。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>Wallpaper</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio 获取 SHA1 值</title>
    <url>/get-SHA1-value/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在 Android 的开发中经常需要获取应用的 SHA1 值，今天谈谈如何获取。</p>
<a id="more"></a>

<h2 id="获取开发版SHA1"><a href="#获取开发版SHA1" class="headerlink" title="获取开发版SHA1"></a>获取开发版SHA1</h2><ol>
<li>打开 Android Studio 的 Terminal 控制台。</li>
<li>输入命令 <code>C:</code> 进入 C 盘（mac 进入 ~）。</li>
<li>输入命令 <code>cd Users\Adminstrator\.android</code> 其中 &lt;Administrator&gt; 是自己的用户名。</li>
<li>输入命令 <code>keytool -list -v -keystore debug.keystore</code> 其中 debug.keystore 是 Android Studio 默认的 keystore，紧接着输入密钥 <code>android</code>。</li>
</ol>
<h2 id="获取发布版SHA1"><a href="#获取发布版SHA1" class="headerlink" title="获取发布版SHA1"></a>获取发布版SHA1</h2><ol>
<li>打开 Android Studio 的 Terminal 控制台。</li>
<li>输入命令 <code>C:</code> 进入C盘（mac 进入 ~）。</li>
<li>输入命令 <code>cd Users\Adminstrator\.android</code> 其中 &lt;Administrator&gt; 是自己的用户名。</li>
<li>输入命令 <code>keytool -list -v -keystore 文件目录\自己的签名文件</code> ，比如 <code>keytool -list -v -keystore E:\android.keystore</code> ，输入自己的密钥。</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>SHA1</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo 插入图片</title>
    <url>/hexo-asset-image/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote class="blockquote-center">
<p>Hexo 插入图片</p>

</blockquote>

<a id="more"></a>

<div class="tabs" id="fourth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-unique-name-1">使用插件</a></li><li class="tab"><a href="#fourth-unique-name-2">使用标签</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-unique-name-1"><ol>
<li><p>安装插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件 _config.yml 的 <code>post_asset_image</code> 为 true。</p>
</li>
<li><p>修改 /node_modules/hexo-asset-image/index.js。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">config.post_asset_folder</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>用法：<code>hexo new &lt;文章名&gt;</code> 之后，会在 source/_posts/ 下生成 <strong>&lt;文章名&gt;.md 文件</strong> 和 <strong>&lt;文章名&gt; 文件夹</strong>，我们把需要用到的图片复制到 <strong>&lt;文章名&gt; 文件夹</strong> 内，在 <strong>&lt;文章名&gt;.md 文件</strong> 内按照 markdown 的标准写，比如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片的代替名字</span>](<span class="link">图片的路径</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol></div><div class="tab-pane" id="fourth-unique-name-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] <span class="string">&#x27;&quot;title text&quot; &quot;alt text&quot;&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop-3.2.0 的安装</title>
    <url>/install-Hadoop-3.2.0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Hadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。Hadoop 实现了一个分布式文件系统（Hadoop Distributed File System），简称 HDFS。HDFS 有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS 放宽了（relax）POSIX 的要求，可以以流的形式访问（streaming access）文件系统中的数据。Hadoop 的框架最核心的设计就是：HDFS 和 MapReduce。HDFS 为海量的数据提供了存储，而 MapReduce 则为海量的数据提供了计算 。</p>
<a id="more"></a>

<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ol>
<li>关闭防火墙。</li>
<li>安装 JDK。</li>
<li>修改 主机名 和 IP的映射关系。</li>
<li>安装 Hadoop。</li>
</ol>
<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><ol>
<li><p>运行 <code>systemctl status firewalld</code> 命令查看当前防火墙的状态。</p>
<ul>
<li>如果防火墙的状态参数时 inactive，则防火墙为关闭状态。</li>
<li>如果防火墙的状态参数是 active，则防火墙为开启状态。本示例中防火墙为开启状态，因此需要关闭防火墙。</li>
</ul>
</li>
<li><p>关闭防火墙。如果防火墙为关闭状态可以忽略此步骤。</p>
<ul>
<li><p>如果您想临时关闭防火墙，运行命令 <code>systemctl stop firewalld</code> 。</p>
<div class="note info"><p><strong>说明</strong> 这只是暂时关闭防火墙，下次重启 Linux 后，防火墙还会开启。</p>
</div>
</li>
<li><p>如果您想永久关闭防火墙，运行命令 <code>systemctl disable firewalld</code> 。</p>
<div class="note info"><p><strong>说明</strong> 如果您想重新开启防火墙，请参见 <a href="https://firewalld.org/?spm=a2c4g.11186623.2.34.31507e89y2r8G9">firewalld 官网信息</a> 。</p>
</div>

</li>
</ul>
</li>
</ol>
<h2 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h2><ol>
<li><p>依次运行以下命令下载并解压 JDK。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /usr/java</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/java/</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_181</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新加载环境变量脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证 Java 是否生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询系统 JDK。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java</span><br><span class="line">或者</span><br><span class="line">rpm -qa | grep jdk</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除状态自带的 JDK。</p>
<p>例如 <code>rpm -e --nodeps java-1.7.0-openjdk-1.7.0.75-2.5.4.2.el7_0.x86_64</code></p>
</li>
</ol>
<h2 id="修改-主机名-和-IP-的映射关系"><a href="#修改-主机名-和-IP-的映射关系" class="headerlink" title="修改 主机名 和 IP 的映射关系"></a>修改 主机名 和 IP 的映射关系</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=sjd</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.182.128 sjd    <span class="comment">###注意前面的IP地址为服务器的地址，可通过ifconfig查看</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h2><ol>
<li><p>依次运行以下命令下载并解压 Hadoop 安装包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://archive.apache.org/dist/hadoop/common/hadoop-3.2.0/hadoop-3.2.0.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/software</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-3.2.0.tar.gz </span><br></pre></td></tr></table></figure>
</li>
<li><p>修改环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profiel</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HOME=/bigdata/hadoop-3.1.1</span><br><span class="line"><span class="built_in">export</span> PATH=.:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新加载环境变量脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Hadoop 的 <strong>5</strong> 个配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/software/hadoop-3.2.0/etc/hadoop</span><br></pre></td></tr></table></figure>

<ol>
<li><p>hadoop-env.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.7.0_65</span><br></pre></td></tr></table></figure>
</li>
<li><p>core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 制定HDFS的老大（NameNode）的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://itcast01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/itcast/hadoop-2.4.1/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS副本的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>mapred-site.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv mapred-site.xml.template mapred-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定mr运行在yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定YARN的老大（ResourceManager）的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>初始化（格式化） HDFS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/softare/hadoop-3.2.0/bin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./hdfs namenode -format</span><br></pre></td></tr></table></figure>

<div class="note danger"><ol>
<li>Hadoop3.x 升级 JDK为 1.8+，所以在格式化 namenode 时若 JDK版本不匹配会报错。</li>
<li>如果没有修改自己的IP和主机名的映射，在namenode格式化会报错，需参见 <strong>5.修改 主机名 和 IP的映射关系</strong> ，配置 本机主机名和 IP 映射关系。</li>
</ol>
</div>
</li>
<li><p>配置 ssh 免密登录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">&#x27;&#x27;</span> -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 Hadoop。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/software/hadoop-3.2.0/sbin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure>

<p><img src="1.png"></p>
<div class="note danger"><p><strong>注意</strong> 这时会发现出现如上图所示的错误，解决方法如下。</p>
</div>

<p>在 <strong>start-dfs.sh</strong>、<strong>stop-dfs.sh</strong> 两个文件头部添加以下参数。</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></table></figure>

<p>   在 <strong>start-yarn.sh</strong>、<strong>stop-yarn.sh</strong> 两个文件头部添加以下参数。</p>
   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>

<p>   重启。</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure>

<p>   查看服务是否启动。</p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jsp</span><br></pre></td></tr></table></figure>

<h2 id="访问-HDFS-的管理页面"><a href="#访问-HDFS-的管理页面" class="headerlink" title="访问 HDFS 的管理页面"></a>访问 HDFS 的管理页面</h2><div class="note info"><p>Hadoop3 中 HDFS 的默认端口为 9870。</p>
<p>Hadoop2 中 HDFS 的默认端口为 50070。</p>
</div>

<p><img src="2.png"></p>
<h2 id="访问-YARN-的管理页面"><a href="#访问-YARN-的管理页面" class="headerlink" title="访问 YARN 的管理页面"></a>访问 YARN 的管理页面</h2><p><img src="3.png"></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 MAVEN</title>
    <url>/install-Maven/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>MAVEN 是意第绪语，意为知识的积累，最初是为了简化 Jakarta Turbine 项目中的构建过程。有几个项目，每个项目都有自己的 Ant 构建文件，所有项目都略有不同。JAR 已签入 CVS。我们想要一种标准的方式来构建项目，清晰地定义项目的组成，一种简单的方式来发布项目信息，以及一种在多个项目中共享 JAR 的方式。</p>
<a id="more"></a>

<h2 id="MAVEN-的优势"><a href="#MAVEN-的优势" class="headerlink" title="MAVEN 的优势"></a>MAVEN 的优势</h2><ul>
<li>简化构建过程</li>
<li>提供统一的构建系统</li>
<li>提供优质的项目信息</li>
<li>鼓励更好的开发过程</li>
</ul>
<h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><ol>
<li><p>安装 JDK1.7 以上并正确配置 Java 环境变量。</p>
</li>
<li><p>下载 <a href="http://maven.apache.org/download.cgi">MAVEN 最新安装包</a> 并解压。</p>
</li>
<li><p>配置 MAVEN 环境变量。</p>
<ul>
<li>新建变量 <strong>M2_HOME</strong>，赋值 <strong>maven的路径</strong>。</li>
<li>在环境变量中追加 <strong>%M2_HOME%\bin</strong></li>
</ul>
</li>
<li><p>运行命令 <code>mvn -v</code> 验证 MAVEN 环境是否配置成功。</p>
</li>
<li><p>修改配置文件 <strong>maven的安装目录/conf/settings.xml</strong>。</p>
<ul>
<li><p>本地仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span></span><br><span class="line">    D:\software\apache-maven-3.6.3\repository</span><br><span class="line"><span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>远程仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>MAVEN</tag>
      </tags>
  </entry>
  <entry>
    <title>字节跳动面经</title>
    <url>/interview-bytedance/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote class="blockquote-center">
<p>天道酬勤</p>

</blockquote>

<a id="more"></a>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li>什么是幂等？什么情况下需要考虑幂等？你怎么解决幂等的问题？</li>
</ol>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol>
<li>多个线程同时读写，读进程的数量远远大于写进程，你认为应该如何解决并发的问题？你会选择加什么样的锁？</li>
<li>Java 的 AQS 是否了解，它是干嘛的？</li>
<li>除了 synchronized 关键字之外，你是怎么来保障线程安全的？</li>
<li>什么时候需要加 volatile 关键字？它能保证线程安全吗？</li>
<li>线程池内的线程如果全部忙，提交一个新的任务会发生什么？队列全部塞满了之后，还是忙，再提交会发生什么？</li>
<li>Tomcat 本身的参数你一般会怎么调整？</li>
<li>synchronized 关键字锁住的是什么东西？在字节码中是怎么表示的？在内存中的对象上表现为什么？</li>
<li>wait/notify/notifyAll 方法需不需要被包含在 synchronized 块中？这是为什么？</li>
<li>ExecutorService 你一般是怎么用的？是每一个 service 放一个还是一个项目里面放一个？有什么好处？</li>
</ol>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ol>
<li>你有没有用过 Spring 的 AOP？是用来干嘛的？大概会怎么使用？</li>
<li>如果一个接口有 2 个不同的实现，那么怎么来 Autowire 一个指定的实现？</li>
<li>Spring 的声明式事务 @Transaction 注解一般写在什么位置？抛出了异常会自动回滚吗？一样办法控制不触发回滚？</li>
<li>如果想在某个 Bean 生成并装配完毕后执行自己的逻辑，可以什么方式实现？</li>
<li>SpringBoot 没有放到 web 容器里为什么能跑 HTTP 服务？</li>
<li>SpringBoot 中如果你想使用自定义的配置文件而不仅仅是 application.properties，应该怎么弄？</li>
<li>SpringMVC 中RequestMapping 可以指定 GET、POST 方法吗？怎么指定？</li>
<li>SpringMVC 如果希望把输出的 Object（例如XXResult 或者 XXResponse）这种包装为 JSON 输出，应该怎么处理？</li>
<li>怎么拦截 SpringMVC 的异常，然后做自定义的处理，比如打日志或者包装成 JSON。</li>
</ol>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol>
<li>如果有很多数据插入 MySQL，你会选择什么方式？</li>
<li>如果查询很慢，你会想到的第一个方式是什么？索引是干嘛的？</li>
<li>如果建了一个单列索引，查询的时候查出 2 列，会用的这个单列索引吗？</li>
<li>如果见了一个包含多个列的索引，查询的时候只用了第一列，能不能用上这个索引？查 3 个列呢？</li>
<li>接上题，如果 where 条件后面带有一个 i + 5 &lt; 100 会使用这个索引吗？</li>
<li>怎么看是否用到了某个索引？</li>
<li><strong>like %aaa%</strong> 会使用索引吗？<strong>like aaa%</strong> 呢？</li>
<li>drop、truncate、delete 的区别？</li>
<li>平时你们是怎么监控数据库的？MySQL 是怎么排查的？</li>
<li>你们数据库是否支持 emoji 表情，如果不支持，怎么操作?</li>
<li>你们的数据库单表数据量是多少？一般多大的时候开始出现查询性能急剧下降？</li>
<li>查询死掉了，想要找出执行查询进程用什么命令？</li>
<li>读写分离是怎么做的？你认为中间件会怎么来操作？这样操作跟事务有什么关系？</li>
<li>分库分表有没有做过？线上的迁移过程是怎么样的？如何确定数据是否正确？</li>
</ol>
<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ol>
<li>你知道哪些或者你们线上使用什么 GC 策略？它有什么优势，适用于什么场景？</li>
<li>Java 类加载器包括几种？它们之间的父子关系是怎么样的？双亲委派机制是怎么意思？有什么好处？</li>
<li>如何定义一个类加载器？你使用过哪些或者你在什么场景下需要一个自定义的类加载器？</li>
<li>堆内存设置的参数是什么?</li>
<li>Perm Space 中保存什么数据？会引起 <strong>Out Of Memory</strong> 吗？</li>
<li>做 GC 时，一个对象在内存中各个 Space 中被移动的顺序是什么？</li>
<li>你有没有遇到过 <strong>Out Of Memory</strong> 问题？你是怎么来处理这个问题的？处理过程中有哪些收获？</li>
<li>1.8 之后 Perm Space 有哪些变动？MeteSpace 大小默认是无限的吗？还是你们会通过什么方式来指定大小？</li>
<li>Jstack 是干什么的？Jstat 呢？如果线上程序周期性出现卡顿，你怀疑是 GC 导致的，你会怎么来排查者问题？线程日志一般你会看其中的什么部分？</li>
<li>StackOverFlow异常有没有遇到过？一般你猜测会在什么情况下被触发？如何指定一个线程的堆栈大小？一般你们写多少？</li>
</ol>
<h2 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h2><ol>
<li>日志特别大只想看最后 100 行怎么弄？如果想一直看日志的持续性输出，用什么命令？</li>
<li>如果日志一边输出，一边想实时查看某个关键字应该怎么弄？</li>
<li>grep 如果忽略大小写应该怎么弄？正则表达式呢？</li>
<li>vim 往下一行是什么键？往下 30 行呢？跳到文件末尾一行是什么？跳回来是什么？向后搜索是什么？</li>
<li>如果有个文本文件，按空格作为列的分隔符，如果想统计第三列里面的每个单词出现次数应该怎么弄？</li>
<li>如果把上面的出现次数排个序应该怎么弄？想按照数字本身而不是字符串的顺序排列怎么弄？</li>
<li>Linux 环境变量是以上面作为分隔符的？环境变量通过什么命令设置？</li>
<li>给某个文件设置权限，比如设置为 644 是用什么命令，这个 6 是什么意思？</li>
<li>Linux 下面如果想看某个进程的资源占用情况应该怎么看？系统 load 大概指什么意思？你们线上系统 load 一般多少？如果一个 4 核机器，你任务多少 load 是比较正常的？top 面临里面按一下 1 会发生什么？</li>
<li>rop 命令里面，有时候所有进程的 CPU 使用率加起来超过 100% 是怎么回事？</li>
<li>还有哪些查看系统性能或者供你发现问题的命令？你一般是看哪个参数？</li>
<li>想看某个进程是否打开网络连接是什么命令？里面连接的状态你比较关心哪几种？</li>
</ol>
<h3 id="偏题"><a href="#偏题" class="headerlink" title="偏题"></a>偏题</h3><ol>
<li>有没有做个 Linux 系统参数方面的优化，大概优化过什么？</li>
<li>系统参数里面有个叫做 backlog 的可以用来干什么？</li>
<li>查看网络连接发现好多 TIME_WAIT 可能是什么原因？对你的应用会有什么影响？你会选择什么样的方式来减少这些 TIME_WAIT？</li>
<li>可否介绍一下 TCP 三次我收到 过程，如果限制有个网络程序，你用第三方的 library 来发送数据，你怀疑这个 library 发送的数据有问题，那么怎么来验证？tcpdump 导出的文件你一般是怎么分析的？</li>
<li>KeepAlive 是用来干什么的？这样的好处是什么？</li>
</ol>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ol>
<li><h3 id="缓存穿透可以介绍一下吗？你认为应该如何解决这个问题？"><a href="#缓存穿透可以介绍一下吗？你认为应该如何解决这个问题？" class="headerlink" title="缓存穿透可以介绍一下吗？你认为应该如何解决这个问题？"></a>缓存穿透可以介绍一下吗？你认为应该如何解决这个问题？</h3></li>
<li>你是怎么触发缓存更新的？（比如设置超过时间（被动方式），比如更新的时候主动 update）如果是被动的方式如何控制多个入口同时触发某个缓存更新？</li>
<li>你们用 Redis 来做什么？为什么不用其他的 KV 存储例如 Memcached、Cassandra 等？</li>
<li>你们用什么 Redis 客户端？Redis 高性能的原因大概有哪些？</li>
<li>你们熟悉哪些 Redis 的数据结构？zset 是干什么的？和 set 有什么区别？</li>
<li>Redis 的 hash，存储和获取的具体命令叫什么名字？</li>
<li>LPOP 和 BLPOP 的区别？</li>
<li>Redis 的有一些包含 SCAN 的关键字的命令是干嘛的？SCAN 返回的数据量是固定的吗？</li>
<li>Redis 中的 Lus 有没有使用过？可以用来做什么？为什么可以这么用？</li>
<li>Redis 的 Pipeline 是用来干什么的？</li>
</ol>
<h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><ol>
<li>Redis 持久化大概有几种方式？AOF和 RDB的区别是什么？AOF 有什么优缺点？</li>
<li>Redis Replication 的大致流程是什么？bgsave 这个命令的执行过程？</li>
</ol>
<h3 id="偏题-1"><a href="#偏题-1" class="headerlink" title="偏题"></a>偏题</h3><ol>
<li>如果有好多 KV 数据要存储到 Redis，但是内存不足，通过什么方式可以缩减内存？为什么这样可以缩小内存？</li>
<li>Redis 中 List，HashTable 都用到了 ZipList，为什么会选择它？</li>
</ol>
<h3 id="监控、稳定性"><a href="#监控、稳定性" class="headerlink" title="监控、稳定性"></a>监控、稳定性</h3><ol>
<li>业务日志是通过什么方式来收集的？</li>
<li>线上机器如何监控？采用什么开源产品或者自研的产品？它是分钟级的还是秒级的？</li>
<li>如果让你想办法收集一个 Java 后端应用的性能数据，你会在意哪些方面？你会选择什么样的根据、思路来收集？</li>
<li>一般你调用第三方的时候会不会监控调用情况？</li>
</ol>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>字节跳动</tag>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠标点击特效</title>
    <url>/mouse-click-effect/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote class="blockquote-center">
<p>鼠标点击特效</p>

</blockquote>

<a id="more"></a>

<h2 id="爱心"><a href="#爱心" class="headerlink" title="爱心"></a>爱心</h2><p>love.js。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        c(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>), o(), r()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.length; e++) d[e].alpha &lt;= <span class="number">0</span> ? (t.body.removeChild(d[e].el), d.splice(e, <span class="number">1</span>)) : (d[e].y--, d[e].scale += <span class="number">.004</span>, d[e].alpha -= <span class="number">.013</span>, d[e].el.style.cssText = <span class="string">&quot;left:&quot;</span> + d[e].x + <span class="string">&quot;px;top:&quot;</span> + d[e].y + <span class="string">&quot;px;opacity:&quot;</span> + d[e].alpha + <span class="string">&quot;;transform:scale(&quot;</span> + d[e].scale + <span class="string">&quot;,&quot;</span> + d[e].scale + <span class="string">&quot;) rotate(45deg);background:&quot;</span> + d[e].color + <span class="string">&quot;;z-index:99999&quot;</span>);</span><br><span class="line">        requestAnimationFrame(r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e.onclick &amp;&amp; e.onclick;</span><br><span class="line">        e.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            t &amp;&amp; t(), i(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        a.className = <span class="string">&quot;heart&quot;</span>, d.push(&#123;</span><br><span class="line">            el: a,</span><br><span class="line">            x: e.clientX - <span class="number">5</span>,</span><br><span class="line">            y: e.clientY - <span class="number">5</span>,</span><br><span class="line">            scale: <span class="number">1</span>,</span><br><span class="line">            alpha: <span class="number">1</span>,</span><br><span class="line">            color: s()</span><br><span class="line">        &#125;), t.body.appendChild(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.createElement(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">        a.type = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            a.appendChild(t.createTextNode(e))</span><br><span class="line">        &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">            a.styleSheet.cssText = e</span><br><span class="line">        &#125;</span><br><span class="line">        t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> d = [];</span><br><span class="line">    e.requestAnimationFrame = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(), n()</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<h2 id="社会主义核心价值观"><a href="#社会主义核心价值观" class="headerlink" title="社会主义核心价值观"></a>社会主义核心价值观</h2><ol>
<li><p>引入 jQuery。</p>
</li>
<li><p>text.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;富强&quot;</span>, <span class="string">&quot;民主&quot;</span>, <span class="string">&quot;文明&quot;</span>, <span class="string">&quot;和谐&quot;</span>, <span class="string">&quot;自由&quot;</span>, <span class="string">&quot;平等&quot;</span>, <span class="string">&quot;公正&quot;</span>, <span class="string">&quot;法治&quot;</span>, <span class="string">&quot;爱国&quot;</span>, <span class="string">&quot;敬业&quot;</span>, <span class="string">&quot;诚信&quot;</span>, <span class="string">&quot;友善&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> $i = $(<span class="string">&quot;&lt;span/&gt;&quot;</span>).text(a[a_idx]);</span><br><span class="line">        a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX, y = e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            <span class="string">&quot;z-index&quot;</span>: <span class="number">100000000</span>,</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: y - <span class="number">20</span>,</span><br><span class="line">            <span class="string">&quot;left&quot;</span>: x,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">            <span class="string">&quot;font-weight&quot;</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">            <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ff6651&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&quot;body&quot;</span>).append($i);</span><br><span class="line">        $i.animate(&#123;<span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>, <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span>&#125;, <span class="number">1500</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $i.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="爆炸"><a href="#爆炸" class="headerlink" title="爆炸"></a>爆炸</h2><ol>
<li><p>引入 canvas 和 anime.min.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;canvas <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fireworks&quot;</span> style=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;&lt;/canvas&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/anime.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/boom.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>boom.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    pointerX = (e.clientX || e.touches[<span class="number">0</span>].clientX) - canvasEl.getBoundingClientRect().left, pointerY = e.clientY || e.touches[<span class="number">0</span>].clientY - canvasEl.getBoundingClientRect().top</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = anime.random(<span class="number">0</span>, <span class="number">360</span>) * <span class="built_in">Math</span>.PI / <span class="number">180</span>, a = anime.random(<span class="number">50</span>, <span class="number">180</span>), n = [-<span class="number">1</span>, <span class="number">1</span>][anime.random(<span class="number">0</span>, <span class="number">1</span>)] * a;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">x</span>: e.x + n * <span class="built_in">Math</span>.cos(t), <span class="attr">y</span>: e.y + n * <span class="built_in">Math</span>.sin(t)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> a.x = e, a.y = t, a.color = colors[anime.random(<span class="number">0</span>, colors.length - <span class="number">1</span>)], a.radius = anime.random(<span class="number">16</span>, <span class="number">32</span>), a.endPos = setParticuleDirection(a), a.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, !<span class="number">0</span>), ctx.fillStyle = a.color, ctx.fill()</span><br><span class="line">    &#125;, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> a.x = e, a.y = t, a.color = <span class="string">&quot;#F00&quot;</span>, a.radius = <span class="number">0.1</span>, a.alpha = <span class="number">0.5</span>, a.lineWidth = <span class="number">6</span>, a.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.globalAlpha = a.alpha, ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, !<span class="number">0</span>), ctx.lineWidth = a.lineWidth, ctx.strokeStyle = a.color, ctx.stroke(), ctx.globalAlpha = <span class="number">1</span></span><br><span class="line">    &#125;, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; e.animatables.length; t++) &#123;</span><br><span class="line">        e.animatables[t].target.draw()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a = createCircle(e, t), n = [], i = <span class="number">0</span>; i &lt; numberOfParticules; i++) &#123;</span><br><span class="line">        n.push(createParticule(e, t))</span><br><span class="line">    &#125;</span><br><span class="line">    anime.timeline().add(&#123;</span><br><span class="line">        targets: n, <span class="attr">x</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.endPos.x</span><br><span class="line">        &#125;, <span class="attr">y</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.endPos.y</span><br><span class="line">        &#125;, <span class="attr">radius</span>: <span class="number">0.1</span>, <span class="attr">duration</span>: anime.random(<span class="number">1200</span>, <span class="number">1800</span>), <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>, <span class="attr">update</span>: renderParticule</span><br><span class="line">    &#125;).add(&#123;</span><br><span class="line">        targets: a,</span><br><span class="line">        radius: anime.random(<span class="number">80</span>, <span class="number">160</span>),</span><br><span class="line">        lineWidth: <span class="number">0</span>,</span><br><span class="line">        alpha: &#123;<span class="attr">value</span>: <span class="number">0</span>, <span class="attr">easing</span>: <span class="string">&quot;linear&quot;</span>, <span class="attr">duration</span>: anime.random(<span class="number">600</span>, <span class="number">800</span>)&#125;,</span><br><span class="line">        duration: anime.random(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">        easing: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">        update: renderParticule,</span><br><span class="line">        offset: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="built_in">this</span>, i = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(a), a = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            e.apply(n, i)</span><br><span class="line">        &#125;, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canvasEl = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (canvasEl) &#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvasEl.getContext(<span class="string">&quot;2d&quot;</span>), numberOfParticules = <span class="number">30</span>, pointerX = <span class="number">0</span>, pointerY = <span class="number">0</span>, tap = <span class="string">&quot;mousedown&quot;</span>,</span><br><span class="line">        colors = [<span class="string">&quot;#FF1461&quot;</span>, <span class="string">&quot;#18FF92&quot;</span>, <span class="string">&quot;#5A87FF&quot;</span>, <span class="string">&quot;#FBF38C&quot;</span>], setCanvasSize = debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            canvasEl.width = <span class="number">2</span> * <span class="built_in">window</span>.innerWidth, canvasEl.height = <span class="number">2</span> * <span class="built_in">window</span>.innerHeight, canvasEl.style.width = <span class="built_in">window</span>.innerWidth + <span class="string">&quot;px&quot;</span>, canvasEl.style.height = <span class="built_in">window</span>.innerHeight + <span class="string">&quot;px&quot;</span>, canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        &#125;, <span class="number">500</span>), render = anime(&#123;</span><br><span class="line">            duration: <span class="number">1</span> / <span class="number">0</span>, <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvasEl.width, canvasEl.height)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(tap, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="string">&quot;sidebar&quot;</span> !== e.target.id &amp;&amp; <span class="string">&quot;toggle-sidebar&quot;</span> !== e.target.id &amp;&amp; <span class="string">&quot;A&quot;</span> !== e.target.nodeName &amp;&amp; <span class="string">&quot;IMG&quot;</span> !== e.target.nodeName &amp;&amp; (render.play(), updateCoords(e), animateParticules(pointerX, pointerY))</span><br><span class="line">    &#125;, !<span class="number">1</span>), setCanvasSize(), <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, setCanvasSize, !<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    pointerX = (e.clientX || e.touches[<span class="number">0</span>].clientX) - canvasEl.getBoundingClientRect().left, pointerY = e.clientY || e.touches[<span class="number">0</span>].clientY - canvasEl.getBoundingClientRect().top</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = anime.random(<span class="number">0</span>, <span class="number">360</span>) * <span class="built_in">Math</span>.PI / <span class="number">180</span>, a = anime.random(<span class="number">50</span>, <span class="number">180</span>), n = [-<span class="number">1</span>, <span class="number">1</span>][anime.random(<span class="number">0</span>, <span class="number">1</span>)] * a;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">x</span>: e.x + n * <span class="built_in">Math</span>.cos(t), <span class="attr">y</span>: e.y + n * <span class="built_in">Math</span>.sin(t)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> a.x = e, a.y = t, a.color = colors[anime.random(<span class="number">0</span>, colors.length - <span class="number">1</span>)], a.radius = anime.random(<span class="number">16</span>, <span class="number">32</span>), a.endPos = setParticuleDirection(a), a.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, !<span class="number">0</span>), ctx.fillStyle = a.color, ctx.fill()</span><br><span class="line">    &#125;, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> a.x = e, a.y = t, a.color = <span class="string">&quot;#F00&quot;</span>, a.radius = <span class="number">0.1</span>, a.alpha = <span class="number">0.5</span>, a.lineWidth = <span class="number">6</span>, a.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.globalAlpha = a.alpha, ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, !<span class="number">0</span>), ctx.lineWidth = a.lineWidth, ctx.strokeStyle = a.color, ctx.stroke(), ctx.globalAlpha = <span class="number">1</span></span><br><span class="line">    &#125;, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; e.animatables.length; t++) &#123;</span><br><span class="line">        e.animatables[t].target.draw()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a = createCircle(e, t), n = [], i = <span class="number">0</span>; i &lt; numberOfParticules; i++) &#123;</span><br><span class="line">        n.push(createParticule(e, t))</span><br><span class="line">    &#125;</span><br><span class="line">    anime.timeline().add(&#123;</span><br><span class="line">        targets: n, <span class="attr">x</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.endPos.x</span><br><span class="line">        &#125;, <span class="attr">y</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.endPos.y</span><br><span class="line">        &#125;, <span class="attr">radius</span>: <span class="number">0.1</span>, <span class="attr">duration</span>: anime.random(<span class="number">1200</span>, <span class="number">1800</span>), <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>, <span class="attr">update</span>: renderParticule</span><br><span class="line">    &#125;).add(&#123;</span><br><span class="line">        targets: a,</span><br><span class="line">        radius: anime.random(<span class="number">80</span>, <span class="number">160</span>),</span><br><span class="line">        lineWidth: <span class="number">0</span>,</span><br><span class="line">        alpha: &#123;<span class="attr">value</span>: <span class="number">0</span>, <span class="attr">easing</span>: <span class="string">&quot;linear&quot;</span>, <span class="attr">duration</span>: anime.random(<span class="number">600</span>, <span class="number">800</span>)&#125;,</span><br><span class="line">        duration: anime.random(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">        easing: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">        update: renderParticule,</span><br><span class="line">        offset: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="built_in">this</span>, i = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(a), a = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            e.apply(n, i)</span><br><span class="line">        &#125;, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canvasEl = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (canvasEl) &#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvasEl.getContext(<span class="string">&quot;2d&quot;</span>), numberOfParticules = <span class="number">30</span>, pointerX = <span class="number">0</span>, pointerY = <span class="number">0</span>, tap = <span class="string">&quot;mousedown&quot;</span>,</span><br><span class="line">        colors = [<span class="string">&quot;#FF1461&quot;</span>, <span class="string">&quot;#18FF92&quot;</span>, <span class="string">&quot;#5A87FF&quot;</span>, <span class="string">&quot;#FBF38C&quot;</span>], setCanvasSize = debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            canvasEl.width = <span class="number">2</span> * <span class="built_in">window</span>.innerWidth, canvasEl.height = <span class="number">2</span> * <span class="built_in">window</span>.innerHeight, canvasEl.style.width = <span class="built_in">window</span>.innerWidth + <span class="string">&quot;px&quot;</span>, canvasEl.style.height = <span class="built_in">window</span>.innerHeight + <span class="string">&quot;px&quot;</span>, canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        &#125;, <span class="number">500</span>), render = anime(&#123;</span><br><span class="line">            duration: <span class="number">1</span> / <span class="number">0</span>, <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvasEl.width, canvasEl.height)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(tap, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="string">&quot;sidebar&quot;</span> !== e.target.id &amp;&amp; <span class="string">&quot;toggle-sidebar&quot;</span> !== e.target.id &amp;&amp; <span class="string">&quot;A&quot;</span> !== e.target.nodeName &amp;&amp; <span class="string">&quot;IMG&quot;</span> !== e.target.nodeName &amp;&amp; (render.play(), updateCoords(e), animateParticules(pointerX, pointerY))</span><br><span class="line">    &#125;, !<span class="number">1</span>), setCanvasSize(), <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, setCanvasSize, !<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="烟花"><a href="#烟花" class="headerlink" title="烟花"></a>烟花</h2><p>fireworks.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; origin, speed, color, angle, context &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.origin = origin</span><br><span class="line">    <span class="built_in">this</span>.position = &#123; ...this.origin &#125;</span><br><span class="line">    <span class="built_in">this</span>.color = color</span><br><span class="line">    <span class="built_in">this</span>.speed = speed</span><br><span class="line">    <span class="built_in">this</span>.angle = angle</span><br><span class="line">    <span class="built_in">this</span>.context = context</span><br><span class="line">    <span class="built_in">this</span>.renderCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.context.fillStyle = <span class="built_in">this</span>.color</span><br><span class="line">    <span class="built_in">this</span>.context.beginPath()</span><br><span class="line">    <span class="built_in">this</span>.context.arc(<span class="built_in">this</span>.position.x, <span class="built_in">this</span>.position.y, <span class="number">2</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.position.x = (<span class="built_in">Math</span>.sin(<span class="built_in">this</span>.angle) * <span class="built_in">this</span>.speed) + <span class="built_in">this</span>.position.x</span><br><span class="line">    <span class="built_in">this</span>.position.y = (<span class="built_in">Math</span>.cos(<span class="built_in">this</span>.angle) * <span class="built_in">this</span>.speed) + <span class="built_in">this</span>.position.y + (<span class="built_in">this</span>.renderCount * <span class="number">0.3</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boom</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">&#123; origin, context, circleCount = <span class="number">16</span>, area &#125;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.origin = origin</span><br><span class="line">    <span class="built_in">this</span>.context = context</span><br><span class="line">    <span class="built_in">this</span>.circleCount = circleCount</span><br><span class="line">    <span class="built_in">this</span>.area = area</span><br><span class="line">    <span class="built_in">this</span>.stop = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">this</span>.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomArray</span>(<span class="params">range</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = range.length</span><br><span class="line">    <span class="keyword">const</span> randomIndex = <span class="built_in">Math</span>.floor(length * <span class="built_in">Math</span>.random())</span><br><span class="line">    <span class="keyword">return</span> range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> range = [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomRange</span>(<span class="params">start, end</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (end - start) * <span class="built_in">Math</span>.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.circleCount; i++</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(&#123;</span><br><span class="line">        context: <span class="built_in">this</span>.context,</span><br><span class="line">        origin: <span class="built_in">this</span>.origin,</span><br><span class="line">        color: <span class="built_in">this</span>.randomColor(),</span><br><span class="line">        angle: <span class="built_in">this</span>.randomRange(<span class="built_in">Math</span>.PI - <span class="number">1</span>, <span class="built_in">Math</span>.PI + <span class="number">1</span>),</span><br><span class="line">        speed: <span class="built_in">this</span>.randomRange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.circles.forEach(<span class="function">(<span class="params">circle, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (circle.position.x &gt; <span class="built_in">this</span>.area.width || circle.position.y &gt; <span class="built_in">this</span>.area.height) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.circles.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.circles.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stop = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.circles.forEach(<span class="function"><span class="params">circle</span> =&gt;</span> circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CursorSpecialEffects</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.computerCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.computerContext = <span class="built_in">this</span>.computerCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderContext = <span class="built_in">this</span>.renderCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.globalWidth = <span class="built_in">window</span>.innerWidth</span><br><span class="line">    <span class="built_in">this</span>.globalHeight = <span class="built_in">window</span>.innerHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.booms = []</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleMouseDown</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> boom = <span class="keyword">new</span> Boom(&#123;</span><br><span class="line">      origin: &#123; <span class="attr">x</span>: e.clientX, <span class="attr">y</span>: e.clientY &#125;,</span><br><span class="line">      context: <span class="built_in">this</span>.computerContext,</span><br><span class="line">      area: &#123;</span><br><span class="line">        width: <span class="built_in">this</span>.globalWidth,</span><br><span class="line">        height: <span class="built_in">this</span>.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    <span class="built_in">this</span>.booms.push(boom)</span><br><span class="line">    <span class="built_in">this</span>.running || <span class="built_in">this</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handlePageHide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.booms = []</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="built_in">this</span>.renderCanvas.style</span><br><span class="line">    style.position = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    style.top = style.left = <span class="number">0</span></span><br><span class="line">    style.zIndex = <span class="string">&#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class="line">    style.pointerEvents = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line">    style.width = <span class="built_in">this</span>.renderCanvas.width = <span class="built_in">this</span>.computerCanvas.width = <span class="built_in">this</span>.globalWidth</span><br><span class="line">    style.height = <span class="built_in">this</span>.renderCanvas.height = <span class="built_in">this</span>.computerCanvas.height = <span class="built_in">this</span>.globalHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.append(<span class="built_in">this</span>.renderCanvas)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="built_in">this</span>.handleMouseDown.bind(<span class="built_in">this</span>))</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pagehide&#x27;</span>, <span class="built_in">this</span>.handlePageHide.bind(<span class="built_in">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.booms.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(<span class="built_in">this</span>.run.bind(<span class="built_in">this</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.computerContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">    <span class="built_in">this</span>.renderContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.booms.forEach(<span class="function">(<span class="params">boom, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (boom.stop) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.booms.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.renderContext.drawImage(<span class="built_in">this</span>.computerCanvas, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cursorSpecialEffects = <span class="keyword">new</span> CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
        <category>特效</category>
      </categories>
      <tags>
        <tag>特效</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派搭建个人服务器</title>
    <url>/raspberry/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>您的小型双显示器台式计算机，以及机器人的大脑，智能家居中枢，媒体中心，联网的AI核心，工厂控制器等等。</p>
<a id="more"></a>

<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>一个树莓派</li>
<li>一张 SD 卡</li>
</ul>
<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ol>
<li>安装 Ubuntu Server。</li>
<li>换源。</li>
<li>连接 WiFi。</li>
<li>安装宝塔。</li>
<li></li>
</ol>
<h2 id="安装-Ubuntu-Server"><a href="#安装-Ubuntu-Server" class="headerlink" title="安装 Ubuntu Server"></a>安装 Ubuntu Server</h2><ol>
<li><p>下载适合树莓派的 <a href="https://ubuntu.com/download/raspberry-pi">Ubuntu Server</a>。</p>
<p><img src="1.png"></p>
</li>
<li><p>刷写镜像到 SD 卡中。</p>
<ol>
<li><p>下载并安装 <a href="https://nchc.dl.sourceforge.net/project/win32diskimager/Archive/win32diskimager-1.0.0-install.exe">Win32 Disk Imager</a>。</p>
<p><img src="2.png"></p>
</li>
<li><p>选择你下载的镜像和你的 SD 卡来写入镜像。</p>
</li>
</ol>
</li>
<li><p>登录并根据提示修改密码。</p>
<ul>
<li>用户名：ubuntu</li>
<li>密码：ubuntu</li>
</ul>
</li>
</ol>
<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><ol>
<li><p>输入以下命令进入 <code>/etc/apt</code> 文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入以下命令备份 <strong>source.list</strong> 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp source.list source.list.bak</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次输入以下命令更换阿里源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano sources.list</span><br><span class="line">将 http:&#x2F;&#x2F;ports.ubuntu.com 替换成 https:&#x2F;&#x2F;mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新软件源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="连接-WiFi"><a href="#连接-WiFi" class="headerlink" title="连接 WiFi"></a>连接 WiFi</h2>]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>网页长截图</title>
    <url>/webpage-screenshot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>方便快捷地截取网页长图。</p>
<a id="more"></a>

<ol>
<li>使用谷歌浏览器打开任意网页或文件。</li>
<li>按 <code>F12</code> 。</li>
<li>按 <code>Ctrl + Shift + P</code> 。</li>
<li>输入 <code>Capture full size screenshot</code> 。</li>
</ol>
]]></content>
      <categories>
        <category>截图</category>
      </categories>
      <tags>
        <tag>截图</tag>
      </tags>
  </entry>
  <entry>
    <title>第十一届蓝桥杯省赛【Java实现】题目+题解</title>
    <url>/2020-lanqiao/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote class="blockquote-center">
<p>第十一届蓝桥杯省赛【Java实现】题目+题解</p>

</blockquote>

<a id="more"></a>

<h2 id="题目概览"><a href="#题目概览" class="headerlink" title="题目概览"></a>题目概览</h2><ul>
<li>跑步训练</li>
<li>纪念日</li>
<li>合并检测</li>
<li>REPEAT 程序</li>
<li>矩阵</li>
<li>整除序列</li>
<li>解码</li>
<li>走方格</li>
<li>整数拼接</li>
<li>网络分析</li>
</ul>
<h2 id="跑步训练"><a href="#跑步训练" class="headerlink" title="跑步训练"></a>跑步训练</h2><p>本题总分：5 分</p>
<p>【问题描述】</p>
<p>小明要做一个跑步训练。初始时，小明充满体力，体力值计为 10000。如果小明跑步，每分钟损耗 600 的体力。如果小明休息，每分钟增加 300 的体力。体力的损耗和增加都是均匀变化的。小明打算跑一分钟、休息一分钟、再跑一分钟、再休息一分钟……如此循环。如果某个时刻小明的体力到达 0，他就停止锻炼。请问小明在多久后停止锻炼。为了使答案为整数，请以秒为单位输出答案。答案中只填写数，不填写单位。</p>
<p>【答案提交】</p>
<p>这是一道结果填空题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第十一届蓝桥杯;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span>跑步训练 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//如果小于600体力并且需要跑步，证明这一分钟跑不完</span></span><br><span class="line">            <span class="keyword">if</span> (target &lt; <span class="number">600</span> &amp;&amp; flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                target -= <span class="number">600</span>;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                target += <span class="number">300</span>;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(count);</span></span><br><span class="line">        <span class="comment">//最后要求秒数，一分钟花费600体力，一秒花费10体力，体力除10就是剩下的跑步时间</span></span><br><span class="line">        <span class="keyword">int</span> time = count * <span class="number">60</span>+target/<span class="number">10</span>;</span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【输出结果】</p>
<p>3880</p>
<h2 id="纪念日"><a href="#纪念日" class="headerlink" title="纪念日"></a>纪念日</h2><p>本题总分：5 分</p>
<p>【问题描述】</p>
<p>2020 年 7 月 1 日是 A 组织 成立 99 周年纪念日。A 组织成立于 1921 年 7 月 23 日。请问从 1921 年 7 月 23 日中午 12 时到 2020 年 7 月 1 日中午 12 时一共包含多少分钟？</p>
<p>【答案提交】</p>
<p>这是一道结果填空题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第十一届蓝桥杯B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>纪念日 </span>&#123;</span><br><span class="line">    <span class="comment">//不需要非要找12点，因为都是从0点算也是一样的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date date1 = format.parse(<span class="string">&quot;1921-7-23&quot;</span>);</span><br><span class="line">        Date date2 = format.parse(<span class="string">&quot;2020-7-1&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = (<span class="keyword">int</span>) ((date2.getTime() - date1.getTime()) / (<span class="number">1000</span>*<span class="number">60</span>));</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【输出结果】</p>
<p>52038720</p>
<h2 id="合并检测"><a href="#合并检测" class="headerlink" title="合并检测"></a>合并检测</h2><p>本题总分：10 分</p>
<p>【问题描述】</p>
<p>***（敏感字）由 ***（敏感字）引起，最近在 A 国蔓延，为了尽快控制 ***（敏感字），A 国准备给大量民众进病毒核酸检测。然而，用于检测的试剂盒紧缺。为了解决这一困难，科学家想了一个办法：合并检测。即将从多个人（k个）采集的标本放到同一个试剂盒中进行检测。如果结果为阴性，则说明这 k个人都是阴性，用一个试剂盒完成了 k 个人的检测。如果结果为阳性，则说明至少有一个人为阳性，需要将这 k 个人的样本全部重新独立检测（从理论上看，如果检测前 k 1 个人都是阴性可以推断出第 k 个人是阳性，但是在实际操作中不会利用此推断，而是将 k 个人独立检测），加上最开始的合并检测，一共使用了 k + 1 个试剂盒完成了 k 个人的检测。A 国估计被测的民众的感染率大概是 1%，呈均匀分布。请问 k 取多少能最节省试剂盒？</p>
<p>【答案提交】</p>
<p>这是一道结果填空题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<p>【输出结果】</p>
<p>设总人数为 pop，感染率 p，每次 k 人，总市级数 sum。<br>sum = ([pop/k]+1)*(1+k*p(k+1))<br>这里的 ([pop/k]+1) 即 pop/k 向上取整。<br>([pop/k]+1) 这里由于 pop 数量较大，所以这里的向上取整的 1 可以忽略，这里直接取了 pop/k，即sum = (pop/k)*(1+k*0.01(k+1))<br>将 p 带入 sum = (pop/k) * (1+k*0.01(k+1))<br>sum 求导 = (pop/k)(0.01k-1/k)<br>可得当 k = 10 时，sum取最小值。<br>所以 k = 10</p>
<h2 id="REPEAT-程序"><a href="#REPEAT-程序" class="headerlink" title="REPEAT 程序"></a>REPEAT 程序</h2><p>本题总分：10 分</p>
<p>【问题描述】</p>
<p>附件 prog.txt 中是一个用某种语言写的程序。<br>其中 REPEAT k 表示一个次数为 k 的循环。循环控制的范围由缩进表达，<br>从次行开始连续的缩进比该行多的（前面的空白更长的）为循环包含的内容。<br>例如如下片段：</p>
<p>REPEAT 2:<br>A = A + 4<br>REPEAT 5:<br>REPEAT 6:<br>A = A + 5<br>A = A + 7<br>A = A + 8<br>A = A + 9</p>
<p>该片段中从 A = A + 4 所在的行到 A = A + 8 所在的行都在第一行的循环两次中。</p>
<p>REPEAT 6: 所在的行到 A = A + 7 所在的行都在 REPEAT 5: 循环中。</p>
<p>A = A + 5 实际总共的循环次数是 2</p>
<p>×</p>
<p>5</p>
<p>×</p>
<p>6 = 60 次。</p>
<p>请问该程序执行完毕之后，A 的值是多少？</p>
<p>【答案提交】<br>这是一道结果填空题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第十一届蓝桥杯;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">E_REPEAT</span>程序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> A=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            A+=<span class="number">4</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)&#123;</span><br><span class="line">                    A+=<span class="number">5</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                A+=<span class="number">7</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            A+=<span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        A+=<span class="number">9</span>;</span><br><span class="line">        System.out.println(A);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【输出结果】</p>
<p>403</p>
<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>本题总分：15 分</p>
<p>【问题描述】</p>
<p>把 1 ∼ 2020 放在 2 × 1010 的矩阵里。要求同一行中右边的比左边大，同一列中下边的比上边的大。一共有多少种方案？答案很大，你只需要给出方案数除以 2020 的余数即可。</p>
<p>【答案提交】</p>
<p>这是一道结果填空题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第十一届蓝桥杯B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span>矩阵1 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">2020</span>;</span><br><span class="line">        <span class="comment">//dp[i][j]表示，从i个数选j个数</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3000</span>][<span class="number">3000</span>];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 1必然放在第一行</span></span><br><span class="line">        <span class="comment">//只要保证第一行的数比第二行的数多就可以了，后面的数会越来越大，会符合小到大的规律</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                dp[i][j] += dp[i - <span class="number">1</span>][j - <span class="number">1</span>]; <span class="comment">// 放到第一层</span></span><br><span class="line">                <span class="keyword">if</span> (i - j &lt;= j) &#123;</span><br><span class="line">                    <span class="comment">//当进入if说明，i没有超过j的两倍了，</span></span><br><span class="line">                    <span class="comment">// （如果超过j的两倍，说明第一行肯定比第二行少了）</span></span><br><span class="line">                    <span class="comment">//本身就是取一半的数字，如果超过两倍，说明取不到一半，不能参与计算</span></span><br><span class="line">                    dp[i][j] += dp[i - <span class="number">1</span>][j];   <span class="comment">//放到第二层</span></span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] %= <span class="number">2020</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[n][n/<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【输出结果】</p>
<p>1340</p>
<h2 id="整除序列"><a href="#整除序列" class="headerlink" title="整除序列"></a>整除序列</h2><p>时间限制：1.0s 内存限制：256.0MB 本题总分：15 分</p>
<p>【问题描述】</p>
<p>有一个序列，序列的第一个数是 n，后面的每个数是前一个数整除 2，请输出这个序列中值为正数的项。</p>
<p>【输入格式】</p>
<p>输入一行包含一个整数 n。</p>
<p>【输出格式】</p>
<p>输出一行，包含多个整数，相邻的整数之间用一个空格分隔，表示答案。</p>
<p>【样例输入】</p>
<p>20</p>
<p>【样例输出】</p>
<p>20 10 5 2 1</p>
<p>【评测用例规模与约定】</p>
<p>对于 80% 的评测用例，1 ≤ n ≤ 10^9。</p>
<p>对于所有评测用例，1 ≤ n≤ 10^18。</p>
<p>【答案提交】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第十一届蓝桥杯;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">G</span>整除序列 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        sc.close();</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(n + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>;<span class="comment">//等价于/2，位运算相对快一些</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【输出结果】</p>
<p>20</p>
<p>20 10 5 2 1</p>
<h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>时间限制: 1.0s 内存限制: 256.0MB 本题总分：20 分</p>
<p>【问题描述】</p>
<p>小明有一串很长的英文字母，可能包含大写和小写。在这串字母中，有很多连续的是重复的。小明想了一个办法将这串字母表达得更短：将连续的几个相同字母写成字母 + 出现次数的形式。例如，连续的 5 个 a，即 aaaaa，小明可以简写成 a5（也可能简写成 a4a、aa3a 等）。对于这个例子：HHHellllloo，小明可以简写成 H3el5o2。为了方便表达，小明不会将连续的超过 9 个相同的字符写成简写的形式。现在给出简写后的字符串，请帮助小明还原成原来的串。</p>
<p>【输入格式】</p>
<p>输入一行包含一个字符串。</p>
<p>【输出格式】</p>
<p>输出一个字符串，表示还原后的串。</p>
<p>【样例输入】</p>
<p>H3el5o2</p>
<p>【样例输出】</p>
<p>HHHellllloo</p>
<p>【评测用例规模与约定】</p>
<p>对于所有评测用例，字符串由大小写英文字母和数字组成，长度不超过 100。</p>
<p>请注意原来的串长度可能超过 100。</p>
<p>【答案提交】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第十一届蓝桥杯B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">G</span>解码 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s = sc.next();</span><br><span class="line">        sc.close();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">char</span>[] num = s.toCharArray();</span><br><span class="line">        <span class="keyword">char</span> temp=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Character.isDigit(num[i]))&#123;</span><br><span class="line">                count=num[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;count;j++)&#123;</span><br><span class="line">                    sb.append(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                temp=num[i];</span><br><span class="line">                <span class="keyword">if</span>(i&lt;len-<span class="number">1</span> &amp;&amp; Character.isDigit(num[i+<span class="number">1</span>]))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【输出结果】</p>
<p>HHHellllloo</p>
<h2 id="走方格"><a href="#走方格" class="headerlink" title="走方格"></a>走方格</h2><p>时间限制: 1.0s 内存限制: 256.0MB 本题总分：20 分</p>
<p>【问题描述】</p>
<p>在平面上有一些二维的点阵。这些点的编号就像二维数组的编号一样，从上到下依次为第 1 至第 n 行，从左到右依次为第 1 至第 m 列，每一个点可以用行号和列号来表示。现在有个人站在第 1 行第 1 列，要走到第 n 行第 m 列。只能向右或者向下走。注意，如果行号和列数都是偶数，不能走入这一格中。问有多少种方案。</p>
<p>【输入格式】</p>
<p>输入一行包含两个整数 n, m。</p>
<p>【输出格式】</p>
<p>输出一个整数，表示答案。</p>
<p>【样例输入】</p>
<p>3 4</p>
<p>【样例输出】</p>
<p>2</p>
<p>【样例输入】</p>
<p>6 6</p>
<p>【样例输出】</p>
<p>0</p>
<p>【评测用例规模与约定】</p>
<p>对于所有评测用例，1 ≤ n ≤ 30, 1 ≤ m ≤ 30。</p>
<p>【答案提交】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第十一届蓝桥杯;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span>走方格 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输入矩阵的宽高</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        sc.close();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//这个规律是只能往右下走，也就是只能取左上的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="comment">//第一行一列无需处理</span></span><br><span class="line">                 <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="keyword">continue</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="comment">//只要不是第一行就可以取上面的</span></span><br><span class="line">                 <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                     dp[i][j]+=dp[i-<span class="number">1</span>][j];</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="comment">//只要不是第一列就可以取左面的</span></span><br><span class="line">                 <span class="keyword">if</span>(j&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                     dp[i][j]+=dp[i][j-<span class="number">1</span>];</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="comment">//如果是偶数行列不能取值，这里是奇数，因为我的是从0开始，所以偶数的就变成了奇数</span></span><br><span class="line">                 <span class="keyword">if</span>((i&amp;<span class="number">1</span>)==<span class="number">1</span> &amp;&amp; (j&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">                     dp[i][j]=<span class="number">0</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[n-<span class="number">1</span>][m-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【输出结果】</p>
<p>3 4</p>
<p>2</p>
<h2 id="整数拼接"><a href="#整数拼接" class="headerlink" title="整数拼接"></a>整数拼接</h2><p>时间限制: 1.0s 内存限制: 256.0MB 本题总分：25 分</p>
<p>【问题描述】</p>
<p>给定义个长度为 n 的数组 A1, A2, · · · , A**n。你可以从中选出两个数 A**i 和 A**j (i 不等于 j)，然后将 A**i 和 A**j 一前一后拼成一个新的整数。例如 12 和 345 可以拼成 12345 或 34512。注意交换 Ai 和 Aj 的顺序总是被视为 2 种拼法，即便是 A**i = A**j 时。请你计算有多少种拼法满足拼出的整数是 K 的倍数。</p>
<p>【输入格式】</p>
<p>第一行包含 2 个整数 n 和 K。<br>第二行包含 n 个整数 A1, A2, · · · , A**n。</p>
<p>【输出格式】</p>
<p>一个整数代表答案。</p>
<p>【样例输入】</p>
<p>4 2<br>1 2 3 4</p>
<p>【样例输出】</p>
<p>6</p>
<p>【评测用例规模与约定】</p>
<p>对于 30% 的评测用例，1 ≤ n≤ 1000, 1 ≤ K ≤ 20, 1 ≤ Ai ≤ 10^4。</p>
<p>对于所有评测用例，1 ≤ n≤ 10^5，1 ≤ K≤ 105，1 ≤ Ai ≤ 10^9。</p>
<p>【答案提交】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第十一届蓝桥杯B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">I</span>整数拼接1 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[k][<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span>[][] b = <span class="keyword">new</span> <span class="keyword">int</span>[k][<span class="number">10</span>];</span><br><span class="line"><span class="comment">//int aa=1111111111;</span></span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记录有哪些数自己和自己拼接可以为k倍</span></span><br><span class="line">        <span class="keyword">int</span> subtract=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            num[i]=sc.nextInt();</span><br><span class="line">            <span class="comment">//取余</span></span><br><span class="line">            temp=num[i]%k;</span><br><span class="line">            <span class="comment">//余数为temp的，并且位数为当前数字相同的</span></span><br><span class="line">            ++b[temp][getLen(num[i])];</span><br><span class="line">            <span class="comment">//求这个数*这个数的位数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">                    <span class="comment">//a[i][j]代表%k余数为i的，后面带10的j次方（因为后面的数不知道几位，所以要把1-9位都算一下）</span></span><br><span class="line">                ++a[((temp*((<span class="keyword">int</span>) (Math.pow(<span class="number">10</span>,j))%k))%k)][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果自身可以拼接，就纪录一下，最后减去自身拼接的数</span></span><br><span class="line">             <span class="keyword">if</span>(temp+(temp*(getLen(num[i])%k))%k==k)&#123;</span><br><span class="line">                 subtract++;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">                <span class="comment">//（余数为i的并且要加上位数为j的数字）的数量*（余数为（k-i）%k并且数字为j位数的）得数量就是组合拼接的数量</span></span><br><span class="line">                count+=a[i][j]*b[(k-i)%k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count-subtract);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求num有几位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLen</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (num!=<span class="number">0</span>)&#123;</span><br><span class="line">            num/=<span class="number">10</span>;</span><br><span class="line">            len*=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【输出结果】</p>
<p>4 2<br>1 2 3 4<br>6</p>
<h2 id="网络分析"><a href="#网络分析" class="headerlink" title="网络分析"></a>网络分析</h2><p>时间限制: 1.0s 内存限制: 256.0MB 本题总分：25 分</p>
<p>【问题描述】</p>
<p>小明正在做一个网络实验。他设置了 n 台电脑，称为节点，用于收发和存储数据。初始时，所有节点都是独立的，不存在任何连接。小明可以通过网线将两个节点连接起来，连接后两个节点就可以互相通信了。两个节点如果存在网线连接，称为相邻。小明有时会测试当时的网络，他会在某个节点发送一条信息，信息会发送到每个相邻的节点，之后这些节点又会转发到自己相邻的节点，直到所有直接或间接相邻的节点都收到了信息。所有发送和接收的节点都会将信息存储下来。一条信息只存储一次。给出小明连接和测试的过程，请计算出每个节点存储信息的大小。</p>
<p>【输入格式】</p>
<p>输入的第一行包含两个整数 n, m，分别表示节点数量和操作数量。节点从 1 至 n 编号。接下来 m 行，每行三个整数，表示一个操作。如果操作为 1 a b，表示将节点 a 和节点 b 通过网线连接起来。当 a = b 时，表示连接了一个自环，对网络没有实质影响。如果操作为 2 p t，表示在节点 p 上发送一条大小为 t 的信息。</p>
<p>【输出格式】</p>
<p>输出一行，包含 n 个整数，相邻整数之间用一个空格分割，依次表示进行完上述操作后节点 1 至节点 n 上存储信息的大小。</p>
<p>【样例输入】</p>
<p>4 8<br>1 1 2<br>2 1 10<br>2 3 5<br>1 4 1<br>2 2 2<br>1 1 2<br>1 2 4<br>2 2 1</p>
<p>【样例输出】</p>
<p>13 13 5 3</p>
<p>【评测用例规模与约定】</p>
<p>对于 30% 的评测用例，1 ≤ n ≤ 20，1 ≤ m ≤ 100。<br>对于 50% 的评测用例，1 ≤ n ≤ 100，1 ≤ m ≤ 1000。<br>对于 70% 的评测用例，1 ≤ n ≤ 1000，1 ≤ m ≤ 10000。<br>对于所有评测用例，1 ≤ n ≤ 10000，1 ≤ m ≤ 100000，1 ≤ t ≤ 100。</p>
<p>【答案提交】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第十一届蓝桥杯B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">J</span>网络分析1 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] data ;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] bool ;</span><br><span class="line">    <span class="keyword">static</span>  LinkedList&lt;LinkedList&lt;Integer&gt;&gt; list = <span class="keyword">new</span>  LinkedList&lt;LinkedList&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        data=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        bool=<span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            a=sc.nextInt();</span><br><span class="line">            b=sc.nextInt();</span><br><span class="line">            c=sc.nextInt();</span><br><span class="line">            <span class="comment">//网络题把他们互相联系起来</span></span><br><span class="line">            <span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line">                list.get(b).add(c);</span><br><span class="line">                list.get(c).add(b);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                bool=<span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">                dfs(b,c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            System.out.println(data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//dfs遍历每一个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        bool[node]=<span class="keyword">true</span>;</span><br><span class="line">        data[node]+=num;</span><br><span class="line">        LinkedList&lt;Integer&gt; templist=list.get(node);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:templist)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!bool[i])&#123;</span><br><span class="line"></span><br><span class="line">                dfs(i,num);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【输出结果】</p>
<p>4 8<br>1 1 2<br>2 1 10<br>2 3 5<br>1 4 1<br>2 2 2<br>1 1 2<br>1 2 4<br>2 2 1<br>13<br>13<br>5<br>3</p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 角落图标</title>
    <url>/GitHub-banner/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote class="blockquote-center">
<p>GitHub 角落图标</p>

</blockquote>

<a id="more"></a>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li><p>到下方选择自己喜欢的样式，copy 相应的代码。</p>
<p>Right side, white on black</p>
<p><img src="right-white-black.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Right side, white on green</p>
<p><img src="right-white-green.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#64CEAA; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Right side, white on red</p>
<p><img src="right-white-red.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#FD6C6C; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Right side, white on blue</p>
<p><img src="right-white-blue.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Right side, black on white</p>
<p><img src="right-black-white.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#fff; color:#151513; position: absolute; top: 0; border: 0; right: 0;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Left side, white on black</p>
<p><img src="left-white-black.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Left side, white on green</p>
<p><img src="left-white-green.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#64CEAA; color:#fff; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Left side, white on red</p>
<p><img src="left-white-red.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#FD6C6C; color:#fff; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Left side, white on blue</p>
<p><img src="left-white-blue.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Left side, black on white</p>
<p><img src="left-black-white.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://your-url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>替换代码中的 url、color 等。</p>
</li>
<li><p>将代码粘贴到 <code>layout/_layout.swing</code> 文件中的 <code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code> 中。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端 - 图标</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>GitHub</tag>
        <tag>图标</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 快捷键</title>
    <url>/IDEA-shortcut-keys/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在使用 IntelliJ Idea 的时候，使用快捷键是必不可少的。掌握一些常用的快捷键能大大提高我们的开发效率。有些快捷键可以熟练的使用，但是还有另外一些快捷键虽然很好用，但是由于因为没有形成使用习惯或者没有理解快捷键的用法，甚至之前对一些快捷键根本没有概念，导致不会去使用。对于这些快捷键，如果能够用好，编辑代码的效率必能提高一个水平。所以在此梳理出来，加强自己的使用，形成习惯。</p>
<a id="more"></a>

<h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F</td>
<td>在当前文件进行文本查找 （必备）</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>在当前文件进行文本替换 （必备）</td>
</tr>
<tr>
<td>Ctrl + Z</td>
<td>撤销 （必备）</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>删除光标所在行 或 删除选中的行 （必备）</td>
</tr>
<tr>
<td>Ctrl + X</td>
<td>剪切光标所在行 或 剪切选择内容</td>
</tr>
<tr>
<td>Ctrl + C</td>
<td>复制光标所在行 或 复制选择内容</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>显示最近打开的文件记录列表</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td>根据输入的 类名 查找类文件</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>在当前文件跳转到指定行处</td>
</tr>
<tr>
<td>Ctrl + J</td>
<td>插入自定义动态代码模板</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>方法参数提示显示</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td>光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>前往当前光标所在的方法的父类的方法 / 接口定义</td>
</tr>
<tr>
<td>Ctrl + B</td>
<td>进入光标所在的方法/变量的接口或是定义出，等效于 Ctrl + 左键单击</td>
</tr>
<tr>
<td>Ctrl + K</td>
<td>版本控制提交项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>版本控制更新项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>显示当前类的层次结构</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>选择可重写的方法</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>选择可继承的方法</td>
</tr>
<tr>
<td>Ctrl + +</td>
<td>展开代码</td>
</tr>
<tr>
<td>Ctrl + -</td>
<td>折叠代码</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</td>
</tr>
<tr>
<td>Ctrl + [</td>
<td>移动光标到当前所在代码的花括号开始位置</td>
</tr>
<tr>
<td>Ctrl + ]</td>
<td>移动光标到当前所在代码的花括号结束位置</td>
</tr>
<tr>
<td>Ctrl + F1</td>
<td>在光标所在的错误代码出显示错误信息</td>
</tr>
<tr>
<td>Ctrl + F3</td>
<td>调转到所选中的词的下一个引用位置</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td>关闭当前编辑文件</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td>在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>
</tr>
<tr>
<td>Ctrl + F9</td>
<td>执行 Make Project 操作</td>
</tr>
<tr>
<td>Ctrl + F11</td>
<td>选中文件 / 文件夹，使用助记符设定 / 取消书签</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>编辑窗口切换，如果在切换的过程又加按上 Delete，则是关闭对应选中的窗口</td>
</tr>
<tr>
<td>Ctrl + Enter</td>
<td>智能分隔行</td>
</tr>
<tr>
<td>Ctrl + End</td>
<td>跳到文件尾</td>
</tr>
<tr>
<td>Ctrl + Home</td>
<td>跳到文件头</td>
</tr>
<tr>
<td>Ctrl + Space</td>
<td>基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号 （必备）</td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td>删除光标后面的单词或是中文句</td>
</tr>
<tr>
<td>Ctrl + BackSpace</td>
<td>删除光标前面的单词或是中文句</td>
</tr>
<tr>
<td>Ctrl + 1,2,3…9</td>
<td>定位到对应数值的书签位置</td>
</tr>
<tr>
<td>Ctrl + 左键单击</td>
<td>在打开的文件标题上，弹出该文件路径</td>
</tr>
<tr>
<td>Ctrl + 光标定位</td>
<td>按 Ctrl 不要松开，会显示光标所在的类信息摘要</td>
</tr>
<tr>
<td>Ctrl + 左方向键</td>
<td>光标跳转到当前单词 / 中文句的左侧开头位置</td>
</tr>
<tr>
<td>Ctrl + 右方向键</td>
<td>光标跳转到当前单词 / 中文句的右侧开头位置</td>
</tr>
<tr>
<td>Ctrl + 前方向键</td>
<td>等效于鼠标滚轮向前效果</td>
</tr>
<tr>
<td>Ctrl + 后方向键</td>
<td>等效于鼠标滚轮向后效果</td>
</tr>
</tbody></table>
<h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + `</td>
<td>显示版本控制常用操作菜单弹出层</td>
</tr>
<tr>
<td>Alt + Q</td>
<td>弹出一个提示，显示当前类的声明 / 上下文信息</td>
</tr>
<tr>
<td>Alt + F1</td>
<td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td>
</tr>
<tr>
<td>Alt + F2</td>
<td>对于前面页面，显示各类浏览器打开目标选择弹出层</td>
</tr>
<tr>
<td>Alt + F3</td>
<td>选中文本，逐个往下查找相同文本，并高亮显示</td>
</tr>
<tr>
<td>Alt + F7</td>
<td>查找光标所在的方法 / 变量 / 类被调用的地方</td>
</tr>
<tr>
<td>Alt + F8</td>
<td>在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td>
</tr>
<tr>
<td>Alt + Home</td>
<td>定位 / 显示到当前文件的 Navigation Bar</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td>
</tr>
<tr>
<td>Alt + 左方向键</td>
<td>按左方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td>Alt + 右方向键</td>
<td>按右方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td>Alt + 前方向键</td>
<td>当前光标跳转到当前文件的前一个方法名位置</td>
</tr>
<tr>
<td>Alt + 后方向键</td>
<td>当前光标跳转到当前文件的后一个方法名位置</td>
</tr>
<tr>
<td>Alt + 1,2,3…9</td>
<td>显示对应数值的选项卡，其中 1 是 Project 用得最多</td>
</tr>
</tbody></table>
<h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Shift + F1</td>
<td>如果有外部文档可以连接外部文档</td>
</tr>
<tr>
<td>Shift + F2</td>
<td>跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td>Shift + F3</td>
<td>在查找模式下，查找匹配上一个</td>
</tr>
<tr>
<td>Shift + F4</td>
<td>对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td>
</tr>
<tr>
<td>Shift + F6</td>
<td>对文件 / 文件夹 重命名</td>
</tr>
<tr>
<td>Shift + F7</td>
<td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td>
</tr>
<tr>
<td>Shift + F9</td>
<td>等效于点击工具栏的 Debug 按钮</td>
</tr>
<tr>
<td>Shift + F10</td>
<td>等效于点击工具栏的 Run 按钮</td>
</tr>
<tr>
<td>Shift + F11</td>
<td>弹出书签显示层</td>
</tr>
<tr>
<td>Shift + Tab</td>
<td>取消缩进</td>
</tr>
<tr>
<td>Shift + ESC</td>
<td>隐藏当前 或 最后一个激活的工具窗口</td>
</tr>
<tr>
<td>Shift + End</td>
<td>选中光标到当前行尾位置</td>
</tr>
<tr>
<td>Shift + Home</td>
<td>选中光标到当前行头位置</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>开始新一行。光标所在行下空出一行，光标定位到新行位置</td>
</tr>
<tr>
<td>Shift + 左键单击</td>
<td>在打开的文件名上按此快捷键，可以关闭当前打开文件</td>
</tr>
<tr>
<td>Shift + 滚轮前后滚动</td>
<td>当前文件的横向滚动轴滚动</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + L</td>
<td>格式化代码，可以对当前文件和整个包目录使用 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>优化导入的类，可以对当前文件和整个包目录使用 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + I</td>
<td>光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>对选中的代码弹出环绕选项弹出层</td>
</tr>
<tr>
<td>Ctrl + Alt + J</td>
<td>弹出模板选择窗口，讲选定的代码加入动态模板中</td>
</tr>
<tr>
<td>Ctrl + Alt + H</td>
<td>调用层次</td>
</tr>
<tr>
<td>Ctrl + Alt + B</td>
<td>在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>
</tr>
<tr>
<td>Ctrl + Alt + V</td>
<td>快速引进变量</td>
</tr>
<tr>
<td>Ctrl + Alt + Y</td>
<td>同步、刷新</td>
</tr>
<tr>
<td>Ctrl + Alt + S</td>
<td>打开 IntelliJ IDEA 系统设置</td>
</tr>
<tr>
<td>Ctrl + Alt + F7</td>
<td>显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td>
</tr>
<tr>
<td>Ctrl + Alt + F11</td>
<td>切换全屏模式</td>
</tr>
<tr>
<td>Ctrl + Alt + Enter</td>
<td>光标所在行上空出一行，光标定位到新行</td>
</tr>
<tr>
<td>Ctrl + Alt + Home</td>
<td>弹出跟当前文件有关联的文件弹出层</td>
</tr>
<tr>
<td>Ctrl + Alt + Space</td>
<td>类名自动完成</td>
</tr>
<tr>
<td>Ctrl + Alt + 左方向键</td>
<td>退回到上一个操作的地方 （必备）（注意与其他软件快捷键冲突）</td>
</tr>
<tr>
<td>Ctrl + Alt + 右方向键</td>
<td>前进到上一个操作的地方 （必备）（注意与其他软件快捷键冲突）</td>
</tr>
<tr>
<td>Ctrl + Alt + 前方向键</td>
<td>在查找模式下，跳到上个查找的文件</td>
</tr>
<tr>
<td>Ctrl + Alt + 后方向键</td>
<td>在查找模式下，跳到下个查找的文件</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + F</td>
<td>根据输入内容查找整个项目 或 指定目录内文件 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>自动将下一行合并到当前行末尾 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + Z</td>
<td>取消撤销 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>对选中的代码进行大 / 小写轮流转换 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>
</tr>
<tr>
<td>Ctrl + Shift + C</td>
<td>复制当前文件磁盘路径到剪贴板</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>弹出缓存的最近拷贝的内容管理器弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + E</td>
<td>显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + H</td>
<td>显示方法层次结构</td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td>跳转到类型声明处</td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>快速查看光标所在的方法 或 类的定义</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>查找动作 / 设置</td>
</tr>
<tr>
<td>Ctrl + Shift + /</td>
<td>代码块注释 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + [</td>
<td>选中从光标所在位置到它的顶部中括号位置</td>
</tr>
<tr>
<td>Ctrl + Shift + ]</td>
<td>选中从光标所在位置到它的底部中括号位置</td>
</tr>
<tr>
<td>Ctrl + Shift + +</td>
<td>展开所有代码</td>
</tr>
<tr>
<td>Ctrl + Shift + -</td>
<td>折叠所有代码</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>高亮显示所有该选中文本，按Esc高亮消失</td>
</tr>
<tr>
<td>Ctrl + Shift + F8</td>
<td>在 Debug 模式下，指定断点进入条件</td>
</tr>
<tr>
<td>Ctrl + Shift + F9</td>
<td>编译选中的文件 / 包 / Module</td>
</tr>
<tr>
<td>Ctrl + Shift + F12</td>
<td>编辑器最大化</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>智能代码提示</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>自动结束代码，行末自动添加分号 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + Backspace</td>
<td>退回到上次修改的地方</td>
</tr>
<tr>
<td>Ctrl + Shift + 1,2,3…9</td>
<td>快速添加指定数值的书签</td>
</tr>
<tr>
<td>Ctrl + Shift + 左方向键</td>
<td>在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td>
</tr>
<tr>
<td>Ctrl + Shift + 右方向键</td>
<td>在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td>
</tr>
<tr>
<td>Ctrl + Shift + 左方向键</td>
<td>在光标焦点是在工具选项卡上，缩小选项卡区域</td>
</tr>
<tr>
<td>Ctrl + Shift + 右方向键</td>
<td>在光标焦点是在工具选项卡上，扩大选项卡区域</td>
</tr>
<tr>
<td>Ctrl + Shift + 前方向键</td>
<td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td>
</tr>
<tr>
<td>Ctrl + Shift + 后方向键</td>
<td>光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td>
</tr>
</tbody></table>
<h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + Shift + N</td>
<td>选择 / 添加 task</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>显示添加到收藏夹弹出层</td>
</tr>
<tr>
<td>Alt + Shift + C</td>
<td>查看最近操作项目的变化情况列表</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>添加到收藏夹</td>
</tr>
<tr>
<td>Alt + Shift + I</td>
<td>查看项目当前文件</td>
</tr>
<tr>
<td>Alt + Shift + F7</td>
<td>在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>
</tr>
<tr>
<td>Alt + Shift + F9</td>
<td>弹出 Debug 的可选择菜单</td>
</tr>
<tr>
<td>Alt + Shift + F10</td>
<td>弹出 Run 的可选择菜单</td>
</tr>
<tr>
<td>Alt + Shift + 左键双击</td>
<td>选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td>
</tr>
<tr>
<td>Alt + Shift + 前方向键</td>
<td>移动光标所在行向上移动</td>
</tr>
<tr>
<td>Alt + Shift + 后方向键</td>
<td>移动光标所在行向下移动</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + Alt + V</td>
<td>无格式黏贴</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + N</td>
<td>前往指定的变量 / 方法</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + S</td>
<td>打开当前项目设置</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + C</td>
<td>复制参考信息</td>
</tr>
</tbody></table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>F2</td>
<td>跳转到下一个高亮错误 或 警告位置 （必备）</td>
</tr>
<tr>
<td>F3</td>
<td>在查找模式下，定位到下一个匹配处</td>
</tr>
<tr>
<td>F4</td>
<td>编辑源</td>
</tr>
<tr>
<td>F7</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td>F8</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td>F9</td>
<td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td>F11</td>
<td>添加书签</td>
</tr>
<tr>
<td>F12</td>
<td>回到前一个工具窗口</td>
</tr>
<tr>
<td>Tab</td>
<td>缩进</td>
</tr>
<tr>
<td>ESC</td>
<td>从工具窗口进入代码文件窗口</td>
</tr>
<tr>
<td>连按两次Shift</td>
<td>弹出 Search Everywhere 弹出层</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程</category>
        <category>IDEA</category>
        <category>快捷键</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>部署 LAMP 环境</title>
    <url>/build-LAMP-environment/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本教程介绍如何手动在 ECS 实例上搭建LAMP环境（CentOS 8），其中LNMP分别代表Linux、Apache、MySQL 和 PHP。</p>
<a id="more"></a>

<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>使用本教程进行操作前，请确保您已经注册了阿里云账号。如还未注册，请先完成 <a href="https://account.aliyun.com/register/register.htm">账号注册</a>。</p>
<h2 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h2><p>本篇教程在示例步骤中使用了以下配置的 ECS 实例：</p>
<ul>
<li>实例规格：ecs.c6.large</li>
<li>操作系统：CentOS 7.2 64位</li>
<li>专有网络</li>
<li>公网IP</li>
</ul>
<h2 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h2><p>本篇教程在示例步骤中使用了以下版本的软件。操作时，请您以实际软件版本为准。</p>
<ul>
<li>Apache：2.4.43</li>
<li>MySQL：5.6.24</li>
<li>PHP：7.0.32</li>
<li>phpMyAdmin：4.0.10.20</li>
</ul>
<p>本篇教程适用于熟悉Linux操作系统，初次使用阿里云进行建站的个人用户。</p>
<p>本篇教程主要说明手动安装 LAMP 平台的操作步骤，您也可以在 <a href="https://market.aliyun.com/software">云市场</a> 购买 LAMP 镜像直接启动 ECS，以便快速建站。</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>使用云服务器 ECS 搭建 LAMP 平台的操作步骤如下：</p>
<ol>
<li>准备编译环境</li>
<li>安装 Apache</li>
<li>安装 MySQL</li>
<li>安装 PHP</li>
<li>安装 phpMyAdmin</li>
</ol>
<h2 id="准备编译环境"><a href="#准备编译环境" class="headerlink" title="准备编译环境"></a>准备编译环境</h2><ol>
<li><p>运行命令 <code>cat /etc/redhat-release</code> 查看系统版本。</p>
<p><img src="1.png"></p>
</li>
<li><p>关闭防火墙。</p>
<ol>
<li><p>运行命令 <code>systemctl status firewalld</code> 查看当前防火墙的状态。</p>
<p><img src="2.png"></p>
<ul>
<li>如果防火墙的状态参数是 inactive，则防火墙为关闭状态。</li>
<li>如果防火墙的状态参数是 active，则防火墙为开启状态。本示例在防火墙为开启状态，因此需要关闭防火墙。</li>
</ul>
</li>
<li><p>关闭防火墙。如果防火墙为关闭状态，请忽略此步骤。</p>
<ul>
<li><p>如果您想临时关闭防火墙，运行命令 <code>systemctl stop firewalld</code>。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这只是暂时关闭防火墙，下次重启 Linux 后，防火墙还会开启。</p>
</div>
</li>
<li><p>如果您想永久关闭防火墙，运行命令 <code>systemctl disable firewalld</code>。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>如果您想重新开启防火墙，请参见 <a href="https://firewalld.org/">firewalld官网信息</a>。</p>
</div>
</li>
</ul>
</li>
</ol>
</li>
<li><p>关闭 SELinux。</p>
<ol>
<li><p>运行命令 <code>getenforce</code> 命令查看 SELinux，运行命令 <code>setenforce 0</code>。</p>
<p><img src="3.png"></p>
<ul>
<li>如果 SELinux 状态参数是 Disabled，则 SELinux 为关闭状态。</li>
<li>如果 SELinux 状态参数是 Enforcing，则 SELinux 为开启状态。本示例中 SELinux 为开启状态，因此需要关闭 SELinux。</li>
</ul>
</li>
<li><p>关闭 SELinux。如果 SELinux 为关闭状态，请忽略此步骤。</p>
<ul>
<li><p>如果您想临时关闭 SELinux，运行命令 <code>setenforce 0</code>。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这只是暂时关闭SELinux，下次重启Linux后，SELinux还会开启。</p>
</div>
</li>
<li><p>如果您想永久关闭 SELinux，运行命令 <code>vi /etc/selinux/config</code> 编辑 SELinux 配置文件。回车后，把光标移动到 <em>SELINUX=enforcing</em> 这一行，按 <code>i</code> 键，将其修改为 <em>SELINUX=disabled</em>，按 <code>Esc</code> 键，然后输入 <code>:wq</code> 并回车以保存并关闭 SELinux 配置文件。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>如果您想重新开启SELinux，请参见 <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/deployment_guide/ch-selinux#s1-SELinux-resources">SELinux的官方文档</a>。</p>
</div>
</li>
</ul>
</li>
<li><p>重启系统使设置生效。</p>
</li>
</ol>
</li>
</ol>
<h2 id="安装-Apache"><a href="#安装-Apache" class="headerlink" title="安装 Apache"></a>安装 Apache</h2><ol>
<li><p>依次运行以下命令安装依赖包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum groupinstall &quot;Development Tools&quot; -y</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libtool -y</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install expat-devel pcre pcre-devel openssl-devel -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次运行以下命令下载并解压 Apache、Apr 和 Apr-util 的源码包。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>源码包版本会不断升级。您可以从 <a href="https://mirrors.aliyun.com/apache/httpd/">httpd源码安装包</a> 和 <a href="https://mirrors.aliyun.com/apache/apr/">apr源码安装包</a> 页面查看可用的源码包版本，并将命令中的源码包版本替换为待安装的版本。</p>
</div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/apache/httpd/httpd-&lt;Apache源码包版本&gt;.tar.gz</span><br></pre></td></tr></table></figure>

<p>本示例步骤中，使用的 Apache 源码安装包版本为 2.4.43，因此下载命令为：</p>
<p><code>wget https://mirrors.aliyun.com/apache/httpd/httpd-2.4.43.tar.gz</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/apache/apr/apr-&lt;Apr源码包版本&gt;.tar.gz</span><br></pre></td></tr></table></figure>

<p>本示例步骤中，使用的 Apr 源码安装包版本为 1.6.5，因此下载命令为：</p>
<p><code>wget https://mirrors.aliyun.com/apache/apr/apr-1.6.5.tar.gz</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/apache/apr/apr-util-&lt;Apr-util源码包版本&gt;.tar.gz</span><br></pre></td></tr></table></figure>

<p>本示例步骤中，使用的 Apr-util 源码安装包版本为 1.6.1，因此下载命令为：</p>
<p><code>wget https://mirrors.aliyun.com/apache/apr/apr-util-1.6.1.tar.gz</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf httpd-&lt;Apache源码包版本&gt;.tar.gz -C /usr/local/src</span><br></pre></td></tr></table></figure>

<p>本示例步骤中，使用的 Apache 源码安装包版本为 2.4.43，因此解压命令为：</p>
<p><code>tar xvf httpd-2.4.43.tar.gz -C /usr/local/src</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf apr-&lt;Apr源码包版本&gt;.tar.gz -C /usr/local/src</span><br></pre></td></tr></table></figure>

<p>本示例步骤中，使用的 Apr 源码安装包版本为 1.6.5，因此解压命令为：</p>
<p><code>tar xvf apr-1.6.5.tar.gz -C /usr/local/src</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf apr-util-&lt;Apr-util源码包版本&gt;.tar.gz -C /usr/local/src</span><br></pre></td></tr></table></figure>

<p>本示例步骤中，使用的 Apr-util 源码安装包版本为 1.6.1，因此解压命令为：</p>
<p><code>tar xvf apr-util-1.6.1.tar.gz -C /usr/local/src</code></p>
</li>
<li><p>依次运行以下命令把 Apr 和 Apr-util 的文件夹移到 Apache 的 srclib 文件夹下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv apr-&lt;apr源码包版本&gt; httpd-&lt;Apache源码包版本&gt;/srclib/apr</span><br></pre></td></tr></table></figure>

<p>本示例步骤中，使用的 Apr 和 Apache 源码安装包版本分别为 1.6.5 和 2.4.43，因此移动文件夹的命令为：</p>
<p><code>mv apr-1.6.5 httpd-2.4.43/srclib/apr</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv apr-util-&lt;Apr-util源码包版本&gt; httpd-&lt;Apache源码包版本&gt;/srclib/apr-util</span><br></pre></td></tr></table></figure>

<p>本示例步骤中，使用的 Apr-util 和 Apache 源码安装包版本分别为 1.6.1 和 2.4.43，因此移动文件夹的命令为：</p>
<p><code>mv apr-util-1.6.1 httpd-2.4.43/srclib/apr-util</code></p>
</li>
<li><p>依次运行以下命令编译源码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/httpd-&lt;源码包版本&gt;</span><br></pre></td></tr></table></figure>

<p>本示例步骤中，使用的Apache源码包版本为2.4.43，因此进入Apache源码所在目录的命令为：</p>
<p><code>cd /usr/local/src/httpd-2.4.43</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./buildconf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/apache2 \</span><br><span class="line">--enable-ssl \</span><br><span class="line">--enable-so \</span><br><span class="line">--with-mpm=event \</span><br><span class="line">--with-included-apr \</span><br><span class="line">--enable-cgi \</span><br><span class="line">--enable-rewrite \</span><br><span class="line">--enable-mods-shared=most \</span><br><span class="line">--enable-mpms-shared=all</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次运行以下命令设置 PATH 环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;export PATH=$PATH:/usr/local/apache2/bin&quot; &gt; /etc/profile.d/httpd.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile.d/httpd.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 <code>httpd -v</code> 命令查看 Apache 的版本号。</p>
<p><img src="4.png"></p>
</li>
<li><p>添加 Apache 的启动配置文件。</p>
<ol>
<li><p>运行命令 <code>vi /usr/lib/systemd/system/httpd.service</code>，打开 Apache 的启动配置文件。</p>
</li>
<li><p>按下 <code>i</code> 键然后在配置文件中写入如下内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit] </span><br><span class="line">Description=The Apache HTTP Server </span><br><span class="line">After=network.target </span><br><span class="line"></span><br><span class="line">[Service] </span><br><span class="line">Type=forking </span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/apache2/bin/apachectl -k start </span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/apache2/bin/apachectl -k graceful </span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/apache2/bin/apachectl -k graceful-stop </span><br><span class="line">PIDFile=/usr/<span class="built_in">local</span>/apache2/logs/httpd.pid </span><br><span class="line">PrivateTmp=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>按下 <code>Esc</code> 键，然后输入 <code>:wq</code> 并回车以保存并关闭 Apache 启动配置文件。</p>
</li>
</ol>
</li>
<li><p>依次运行以下命令启动 Apache 服务并设置服务开机自启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start httpd</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable httpd</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看安装结果。</p>
<p>在本地机器的浏览器地址栏中，输入 <code>http://IP地址</code> 并按 <code>Enter</code> 键。若返回页面如下图所示，说明 Apache 服务启动成功。</p>
<p><img src="5.png"></p>
</li>
</ol>
<h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><ol>
<li><p>准备 MySQL 的编译环境和工作目录。</p>
<ol>
<li><p>依次运行以下命令准备编译环境。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install ncurses-devel bison gnutls-devel -y</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install cmake -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次运行以下命令准备 MySQL 数据存放目录，并添加用户和用户组。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/data</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd -r mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -r -g mysql -s /sbin/nologin mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">id mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令更改数据目录属主和属组。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R mysql:mysql /mnt/data</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>依次运行以下命令下载稳定版源码包并解压、编译。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>如果 MySQL 官方的下载链接异常，建议您通过第三方链接下载 MySQL 源码包，或者您也可以通过 MySQL 官网或第三方途径下载 MySQL 源码包，然后使用远程连接工具（例如PuTTY）将源码包上传至服务器。</p>
</div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/mysql-5.6.24.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf mysql-5.6.24.tar.gz -C  /usr/local/src</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/mysql-5.6.24</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/mnt/data \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_ZLIB=system \</span><br><span class="line">-DWITH_LIBWRAP=0 \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DWITH_SYSTEMD=1 \</span><br><span class="line">-DINSTALL_SYSTEMD_UNITDIR=/usr/lib/systemd/system </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 MySQL。</p>
<ol>
<li><p>运行以下命令修改安装目录的属组为 mysql。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R mysql:mysql /usr/local/mysql/</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次运行以下命令初始化数据库并复制配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/mnt/data/</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/my.cnf /etc/my.cnf.bak</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令修改配置文件中的安装路径及数据目录存放路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e &quot;basedir = /usr/local/mysql\ndatadir = /mnt/data\n&quot; &gt;&gt; /etc/my.cnf</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 MySQL 的启动配置文件。</p>
<ol>
<li><p>运行命令 <code>vi /usr/lib/systemd/system/mysql.service</code> 打开 MySQL 的启动配置文件。</p>
</li>
<li><p>按下 <code>i</code> 键，然后添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=MySQL Community Server</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=mysql.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">PermissionsStartOnly=<span class="literal">true</span></span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/mysql/bin/mysqld</span><br><span class="line">TimeoutSec=600</span><br><span class="line">Restart=always</span><br><span class="line">PrivateTmp=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>按下 <code>Esc</code> 键，然后输入 <code>:wq</code> 并回车以保存并关闭 MySQL 启动配置文件。</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>依次运行以下命令设置 PATH 环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;export PATH=$PATH:/usr/local/mysql/bin&quot; &gt; /etc/profile.d/mysql.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile.d/mysql.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次运行以下命令启动 MySQL 服务并设置开机启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 MySQL 的 root 用户密码，并按提示设置密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password</span><br></pre></td></tr></table></figure>

<div class="note danger"><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果连接时出现 <strong>mysqql.sock</strong> 相关报错，可能的原因如下：</p>
<ul>
<li>mysql 服务未正常运行。您可以运行命令 <code>service mysqld status</code> 判断服务是否运行。</li>
<li>mysql.sock 文件路径配置有误。您需要在 /etc/my.cnf 文件内，修改 socket 参数的配置路径与 mysql.sock 文件实际路径一致，并重启 mysql 服务。</li>
</ul>
</div>
</li>
<li><p>运行以下命令测试登录 MySQL 数据库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p><img src="6.png"></p>
</li>
<li><p>运行 <code>\q</code> 命令退出 MySQL。</p>
</li>
</ol>
<h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><ol>
<li><p>运行以下命令安装依赖包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次运行以下命令下载稳定版源码包并解压、编译。</p>
<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>下载 PHP 稳定版源码包需要良好的网络环境。如果下载失败，请先运行命令 <code>cd</code>，然后运行命令 <code>rm -rf mirror</code> 后，重新下载 PHP 稳定版源码包。</p>
</div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://cn2.php.net/get/php-7.0.32.tar.bz2/from/this/mirror</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp mirror php-7.0.32.tar.bz2</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf php-7.0.32.tar.bz2 -C /usr/local/src</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/php-7.0.32</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php \</span><br><span class="line">--with-config-file-scan-dir=/etc/php.d \</span><br><span class="line">--with-apxs2=/usr/local/apache2/bin/apxs \</span><br><span class="line">--with-config-file-path=/etc \</span><br><span class="line">--with-pdo-mysql=mysqlnd \</span><br><span class="line">--with-mysqli=/usr/local/mysql/bin/mysql_config \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--with-freetype-dir \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--with-png-dir \</span><br><span class="line">--with-zlib \</span><br><span class="line">--with-libxml-dir=/usr \</span><br><span class="line">--with-openssl \</span><br><span class="line">--enable-xml \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-bz2</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<div class="note info"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>若 ECS 实例规格内存较小，配置时可关闭不需要的 PHP 扩展，节省内存。例如，在 <strong>./configure</strong> 命令中添加 <strong>–disable-fileinfo</strong> 选项，关闭 fileinfo 扩展。</p>
</div>
</li>
<li><p>运行以下命令复制 PHP 的配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp php.ini-production /etc/php.ini</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行命令 <code>vi /usr/local/apache2/conf/httpd.conf</code> 打开 Apache 配置文件，按下 <code>i</code> 键开始编辑。</p>
<ol>
<li><p>找到 <em>ServerName</em> 参数，添加 <code>ServerName localhost:80</code>。</p>
<p><img src="7.png"></p>
</li>
<li><p>找到 <code>Directory</code> 参数，在 <code>Require all denied</code> 前面添加 <code>#</code>，然后添加 <code>Require all granted</code>。</p>
<p><img src="8.png"></p>
</li>
<li><p>找到 <code>DirectoryIndex index.html</code>，将它替换为 <code>DirectoryIndex index.php index.html</code>。</p>
<p><img src="9.png"></p>
</li>
<li><p>找到如下内容：</p>
<p><img src="10.png"></p>
<p>在后面添加内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php</span><br><span class="line">AddType application/x-httpd-php-source .phps</span><br></pre></td></tr></table></figure>

<p>添加完成后，如下图所示。</p>
<p><img src="11.png"></p>
</li>
<li><p>按下 <code>Esc</code> 键，然后输入 <code>:wq</code> 并回车以保存并关闭Apache 配置文件。</p>
</li>
</ol>
</li>
<li><p>添加 Apache 对解析 PHP 的支持。</p>
<ol>
<li><p>运行命令打开 index.php 文件。</p>
</li>
<li><p>按下 <code>i</code> 键进入编辑模式，并添加如下内容:</p>
</li>
<li><p>按下 <code>Esc</code> 键，然后输入 <code>:wq</code> 并回车以保存并关闭 index.php 文件。</p>
</li>
<li><p>运行以下命令重启 Apache 服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>在本地机器的浏览器地址栏中，输入 <code>https://IP地址</code> 并按下 <code>Enter</code> 键。如果返回页面如下图所示，说明 PHP 解析成功。</p>
<p><img src="12.png"></p>
</li>
</ol>
<h2 id="安装-phpMyAdmin"><a href="#安装-phpMyAdmin" class="headerlink" title="安装 phpMyAdmin"></a>安装 phpMyAdmin</h2><ol>
<li><p>依次运行以下命令准备 phpMyAdmin 数据存放目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/apache2/htdocs/phpmyadmin</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次运行以下命令下载 phpMyAdmin 压缩包并解压。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://files.phpmyadmin.net/phpMyAdmin/4.0.10.20/phpMyAdmin-4.0.10.20-all-languages.zip</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip phpMyAdmin-4.0.10.20-all-languages.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令复制 phpMyAdmin 文件到准备好的数据存放目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv phpMyAdmin-4.0.10.20-all-languages/*  /usr/local/apache2/htdocs/phpmyadmin</span><br></pre></td></tr></table></figure>
</li>
<li><p>在本地机器浏览器地址栏，输入 <code>http://IP地址/phpmyadmin</code> 并按 <code>Enter</code> 键，访问 phpMyAdmin 登录界面。</p>
<p><img src="13.png"></p>
</li>
<li><p>输入 MySQL 的用户名和密码，单击 <strong>执行</strong>。</p>
<p><img src="14.png"></p>
<p>如果出现以下页面，说明 MySQL 连接成功。</p>
<p><img src="15.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>LAMP</tag>
      </tags>
  </entry>
  <entry>
    <title>微框架(2020版)</title>
    <url>/springboot-2020/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="springboot的引言"><a href="#springboot的引言" class="headerlink" title="springboot的引言"></a>springboot的引言</h1><p>Spring Boot是由 <code>Pivotal团队提供的全新框架</code> ，其设计目的是用来 <code>简化Spring应用的 初始搭建以及开发过程</code> 。该框架使用了 <code>特定的方式来进行配置</code> ，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p>
<p><code>springboot(微框架) = springmvc(控制器) + spring core(项目管理)</code></p>
<a id="more"></a>

<h2 id="SSM-Spring-springmvc-mybatis-lt-—-SSM-Spring-stauts2-struts1-mybatis-lt-—-SSH-Spring-Struts-Hibernate"><a href="#SSM-Spring-springmvc-mybatis-lt-—-SSM-Spring-stauts2-struts1-mybatis-lt-—-SSH-Spring-Struts-Hibernate" class="headerlink" title="SSM Spring springmvc  mybatis    &lt;—-   SSM Spring  stauts2|struts1  mybatis  &lt;— SSH Spring Struts  Hibernate "></a>SSM Spring springmvc  mybatis    &lt;—-   SSM Spring  stauts2|struts1  mybatis  &lt;— SSH Spring Struts  Hibernate </h2><h1 id="springboot的特点"><a href="#springboot的特点" class="headerlink" title="springboot的特点"></a>springboot的特点</h1><ol>
<li><code>创建独立的Spring应用程序  </code></li>
<li><code>嵌入的Tomcat，无需部署WAR文件</code></li>
<li><code>简化Maven配置</code></li>
<li><code>自动配置Spring，没有XML配置</code></li>
</ol>
<hr>
<h1 id="springboot-的约定大于配置"><a href="#springboot-的约定大于配置" class="headerlink" title="springboot 的约定大于配置"></a>springboot 的约定大于配置</h1><p>项目目录结构:</p>
<p><img src="image-20200321091519423.png" alt="image-20200321091519423"></p>
<ul>
<li><code>springboot 项目中必须在src/main/resources中放入application.yml(.properties)核心配置文件  名字必须为:application</code></li>
<li><code>springboot 项目中必须在src/main/java中所有子包之外构建全局入口类型，xxApplication，入口类一个springboot项目只能有一个</code></li>
</ul>
<h1 id="springboot的环境搭建"><a href="#springboot的环境搭建" class="headerlink" title="springboot的环境搭建"></a>springboot的环境搭建</h1><p>环境要求:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.System Requirements</span></span><br><span class="line"><span class="code">		JDK18.+</span></span><br><span class="line"><span class="code">		MAVEN3.3  or  Gradle 5.x and 6.x (4.10 is also supported but in a deprecated form)</span></span><br><span class="line"><span class="code">		Spring Framework 5.2.4.RELEASE </span></span><br><span class="line"><span class="code"># 2.ServletContainers: </span></span><br><span class="line"><span class="code">		Tomcat 9.0 </span></span><br><span class="line"><span class="code">   	 	Jetty 9.4 </span></span><br><span class="line"><span class="code">    		Undertow 2.0</span></span><br><span class="line"><span class="code"># 3.开发工具</span></span><br><span class="line"><span class="code">		IDEA 2018版本 </span></span><br><span class="line"><span class="code">		Eclipse 版本  17版本之后</span></span><br></pre></td></tr></table></figure>

<h2 id="项目中引入依赖"><a href="#项目中引入依赖" class="headerlink" title="项目中引入依赖"></a>项目中引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承springboot的父项目--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入springboot的web支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引入配置文件"><a href="#引入配置文件" class="headerlink" title="引入配置文件"></a>引入配置文件</h2><p><code>项目中src/main/resources/application.yml</code></p>
<h2 id="建包并创建控制器"><a href="#建包并创建控制器" class="headerlink" title="建包并创建控制器"></a>建包并创建控制器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在项目中创建指定的包结构</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	 com</span></span><br><span class="line"><span class="comment">	    +| baizhi</span></span><br><span class="line"><span class="comment">	    		+| controller */</span> </span><br><span class="line">                	<span class="meta">@Controller</span></span><br><span class="line">                    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">                        <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">                        <span class="meta">@ResponseBody</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;======hello world=======&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;		  		</span><br></pre></td></tr></table></figure>

<h2 id="编写入口类"><a href="#编写入口类" class="headerlink" title="编写入口类"></a>编写入口类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在项目中如下的包结构中创建入口类 Application</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	com</span></span><br><span class="line"><span class="comment">		+| baizhi                  */</span></span><br><span class="line">            <span class="meta">@SpringBootApplication</span></span><br><span class="line">            <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                    SpringApplication.run(Application.class,args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行main启动项目"><a href="#运行main启动项目" class="headerlink" title="运行main启动项目"></a>运行main启动项目</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">o.s.j.e.a.AnnotationMBeanExporter        : Registering beans <span class="keyword">for</span> JMX exposure on startup</span><br><span class="line">s.b.c.e.t.TomcatEmbeddedServletContainer : <span class="function">Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8989 <span class="params">(http)</span></span></span><br><span class="line"><span class="function">com.baizhi.Application : Started Application in 2.152 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">2.611</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//说明:  出现以上日志说明启动成功</span></span></span><br></pre></td></tr></table></figure>

<h2 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意: springboot的项目默认没有项目名</span></span><br><span class="line"><span class="comment">//访问路径:  http://localhost:8080/hello/hello</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="启动tomcat端口占用问题"><a href="#启动tomcat端口占用问题" class="headerlink" title="启动tomcat端口占用问题"></a>启动tomcat端口占用问题</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8989</span>                 <span class="comment">#用来指定内嵌服务器端口号</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/springboot</span>  <span class="comment">#用来指定项目的访问路径</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="springboot相关注解说明"><a href="#springboot相关注解说明" class="headerlink" title="springboot相关注解说明"></a>springboot相关注解说明</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section"># Spring boot通常有一个名为 xxxApplication的类,入口类中有一个main方法, 在main方法中使用SpringApplication.run(xxxApplication.class,args)启动springboot应用的项目。</span></span><br><span class="line"></span><br><span class="line"><span class="section"># @RestController: 就是@Controller+@ResponseBody组合，支持RESTful访问方 式，返回结果都是json字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="section"># @SpringBootApplication 注解等价于: </span></span><br><span class="line"><span class="code">	@SpringBootConfiguration	标识注解,标识这是一个springboot的配置类</span></span><br><span class="line"><span class="code">	@EnableAutoConfiguration	自动与项目中集成的第三方技术进行集成</span></span><br><span class="line"><span class="code">	@ComponentScan			    扫描入口类所在子包以及子包后代包中注解	</span></span><br><span class="line"><span class="code">   </span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="springboot中配置文件的拆分"><a href="#springboot中配置文件的拆分" class="headerlink" title="springboot中配置文件的拆分"></a>springboot中配置文件的拆分</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#说明: 在实际开发过程中生产环境和测试环境有可能是不一样的，因此将生产中的配置和测试中的配置拆分开，是非常必要的在springboot中也提供了配置文件拆分的方式。这里以生产中项名名称不一致为例:</span></span><br><span class="line">	</span><br><span class="line">	<span class="string">生产中项目名为:</span> <span class="string">cmfz</span></span><br><span class="line">	<span class="string">测试中项目名为:</span> <span class="string">springboot</span></span><br><span class="line">	<span class="string">端口同时为:</span>   <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="string">拆分如下:</span></span><br><span class="line">	<span class="comment">#主配置文件:</span></span><br><span class="line">			<span class="string">application.yml</span>	<span class="comment">#用来书写相同的的配置</span></span><br><span class="line">				<span class="attr">server:</span></span><br><span class="line">					<span class="attr">port:</span> <span class="number">8080</span> <span class="comment">#生产和测试为同一个端口</span></span><br><span class="line">                   </span><br><span class="line">    <span class="comment">#生产配置文件:</span></span><br><span class="line">    		<span class="string">application-pord.yml</span></span><br><span class="line">    			<span class="attr">server:</span></span><br><span class="line">    				<span class="attr">context-path:</span> <span class="string">/cmfz</span></span><br><span class="line">    <span class="comment">#测试配置文件:</span></span><br><span class="line">    		<span class="string">application-dev.yml</span></span><br><span class="line">    			<span class="attr">server:</span></span><br><span class="line">    				<span class="attr">context-path:</span> <span class="string">/springboot</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="springboot中创建自定义简单对象"><a href="#springboot中创建自定义简单对象" class="headerlink" title="springboot中创建自定义简单对象"></a>springboot中创建自定义简单对象</h1><h2 id="管理单个对象"><a href="#管理单个对象" class="headerlink" title="管理单个对象"></a>管理单个对象</h2><blockquote>
<p>在springboot中可以管理自定义的 <code>简单组件</code> 对象的创建可以直接使用注解形式创建。</p>
</blockquote>
<ol>
<li><p>使用 @Repository  @Service @Controller 以及 @Component管理不同简单对象</p>
<p>如：比如要通过工厂创建自定义User对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过工厂创建之后可以在使用处任意注入该对象</p>
<p>如：在控制器中使用自定义简单对象创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">  	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="管理多个对象"><a href="#管理多个对象" class="headerlink" title="管理多个对象"></a>管理多个对象</h2><blockquote>
<p>在springboot中如果要管理 <code>复杂对象</code> 必须使用 <code>@Configuration + @Bean</code> 注解进行管理</p>
</blockquote>
<ol>
<li><p>管理复杂对象的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(推荐)</span> | <span class="meta">@Component(不推荐)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Beans</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Calendar <span class="title">getCalendar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Calendar.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用复杂对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calendar calendar;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ol>
<li>@Configuration  配置注解主要用来生产多个组件交给工厂管理 （注册形式）</li>
<li>@Component     用来管理单个组件                                            （包扫描形式）</li>
</ol>
</li>
</ol>
<hr>
<h1 id="springboot中注入"><a href="#springboot中注入" class="headerlink" title="springboot中注入"></a>springboot中注入</h1><blockquote>
<p>​    springboot中提供了三种注入方式：<code>注入基本属性</code> ，<code>对象注入</code></p>
</blockquote>
<h2 id="基本属性注入"><a href="#基本属性注入" class="headerlink" title="基本属性注入"></a>基本属性注入</h2><ol>
<li><p>@Value 属性注入   [重点]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中注入</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">xiaohei</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="对象方式注入"><a href="#对象方式注入" class="headerlink" title="对象方式注入"></a>对象方式注入</h2><ol>
<li><p>@ConfigurationProperties(prefix = “前缀”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String  bir;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">24</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">xiaohei</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">23</span></span><br><span class="line">  <span class="attr">bir:</span> <span class="number">2012</span><span class="string">/12/12</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>引入依赖构建自定义注入元数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h1 id="springboot中两种模板配置"><a href="#springboot中两种模板配置" class="headerlink" title="springboot中两种模板配置"></a>springboot中两种模板配置</h1><h2 id="集成jsp模板"><a href="#集成jsp模板" class="headerlink" title="集成jsp模板"></a>集成jsp模板</h2><h3 id="引入jsp的集成jar包"><a href="#引入jsp的集成jar包" class="headerlink" title="引入jsp的集成jar包"></a>引入jsp的集成jar包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引入jsp运行插件"><a href="#引入jsp运行插件" class="headerlink" title="引入jsp运行插件"></a>引入jsp运行插件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>springboot_day1<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入jsp运行插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置视图解析器"><a href="#配置视图解析器" class="headerlink" title="配置视图解析器"></a>配置视图解析器</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在配置文件中引入视图解析器</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/</span>   	<span class="comment"># /代表访问项目中webapp中页面</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span> </span><br></pre></td></tr></table></figure>

<h3 id="第一种方式使用插件启动"><a href="#第一种方式使用插件启动" class="headerlink" title="第一种方式使用插件启动"></a>第一种方式使用插件启动</h3><p> <img src="image-20191129124602959.png" alt="image-20191129124602959"></p>
<h3 id="第二种方式使用idea中指定工作目录启动-推荐"><a href="#第二种方式使用idea中指定工作目录启动-推荐" class="headerlink" title="第二种方式使用idea中指定工作目录启动  [推荐]"></a>第二种方式使用idea中指定工作目录启动  [推荐]</h3><p> <img src="image-20191129124727562.png" alt="image-20191129124727562"></p>
<h3 id="启动访问jsp页面"><a href="#启动访问jsp页面" class="headerlink" title="启动访问jsp页面"></a>启动访问jsp页面</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://localhost:8989/cmfz/index.jsp</span><br></pre></td></tr></table></figure>

<h3 id="修改jsp无须重启应用"><a href="#修改jsp无须重启应用" class="headerlink" title="修改jsp无须重启应用"></a>修改jsp无须重启应用</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.servlet.jsp.init-parameters.development</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h2 id="集成thymelaf模板"><a href="#集成thymelaf模板" class="headerlink" title="集成thymelaf模板"></a>集成thymelaf模板</h2><blockquote>
<p>Thymeleaf是一个用于web和独立环境的现代服务器端Java模板引擎。  –摘自官网<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p>
</blockquote>
<p><code>Thymeleaf</code> 是跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP，相较与其他的模板引擎相比, Thymeleaf在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用thymelaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/      #使用模板目录</span></span><br><span class="line"><span class="meta">spring.thymeleaf.suffix</span>=<span class="string">.html                      #使用模板后缀</span></span><br><span class="line"><span class="meta">spring.thymeleaf.encoding</span>=<span class="string">UTF-8                    #使用模板编码</span></span><br><span class="line"><span class="meta">spring.thymeleaf.enabled</span>=<span class="string">true                      #开始thymelaf模板</span></span><br><span class="line"><span class="meta">spring.thymeleaf.servlet.content-type</span>=<span class="string">text/html    #使用模板响应类型</span></span><br></pre></td></tr></table></figure>

<h3 id="编写控制器测试"><a href="#编写控制器测试" class="headerlink" title="编写控制器测试"></a>编写控制器测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>    <span class="comment">//一定要是 @Controller 不能再使用 @RestController 注解</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试与 thymeleaf 的集成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在templates目录中定义模板"><a href="#在templates目录中定义模板" class="headerlink" title="在templates目录中定义模板"></a>在templates目录中定义模板</h3><p><img src="image-20200323085834206.png" alt="image-20200323085834206"></p>
<h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http://localhost:8989/springboot_day3/hello/hello</span></span><br></pre></td></tr></table></figure>

<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p><img src="image-20200323085948499.png" alt="image-20200323085948499"></p>
<h3 id="开启直接访问html页面"><a href="#开启直接访问html页面" class="headerlink" title="开启直接访问html页面"></a>开启直接访问html页面</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/templates/,classpath:/static/</span></span><br></pre></td></tr></table></figure>

<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http://localhost:8989/springboot_day3/index.html</span></span><br></pre></td></tr></table></figure>

<p><img src="image-20200323090142705.png" alt="image-20200323090142705"></p>
<h2 id="Thymeleaf基本使用"><a href="#Thymeleaf基本使用" class="headerlink" title="Thymeleaf基本使用"></a>Thymeleaf基本使用</h2><p><code>使用时必须在页面中加入thymeleaf如下命名空间：</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="展示单个数据"><a href="#展示单个数据" class="headerlink" title="展示单个数据"></a>展示单个数据</h3><h4 id="a-设置数据"><a href="#a-设置数据" class="headerlink" title="a. 设置数据"></a>a. 设置数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>); 或 request.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小黑&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="b-获取数据"><a href="#b-获取数据" class="headerlink" title="b. 获取数据"></a>b. 获取数据</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span>  ---&gt;获取数据</span><br></pre></td></tr></table></figure>

<p><code>注意:在springboot2.x版本中必须加入国际化配置文件才能正常展示:</code></p>
<p><img src="image-20200323100724749.png" alt="image-20200323100724749"></p>
<p><img src="image-20200323100747881.png" alt="image-20200323100747881"></p>
<h4 id="c-获取并解析含有html标签数据"><a href="#c-获取并解析含有html标签数据" class="headerlink" title="c. 获取并解析含有html标签数据"></a>c. 获取并解析含有html标签数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&lt;a href=&#x27;&#x27;&gt;张三&lt;/a&gt;&quot;</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;小陈&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>直接获取原样输出</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="image-20200323100956740.png" alt="image-20200323100956740"></p>
<ul>
<li>获取并解析</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="image-20200323101457134.png" alt="image-20200323101457134"></p>
<ul>
<li>将数据赋值给表单元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="image-20200323103452620.png" alt="image-20200323103452620"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="code">	1.使用 th:text=&quot;$&#123;属性名&#125;&quot;  获取对应数据,获取数据时会将对应标签中数据清空,因此最好是空标签</span></span><br><span class="line"><span class="code">	2.使用 th:utext=&quot;$&#123;属性名&#125;&quot; 获取对应的数据,可以将数据中html先解析在渲染到页面</span></span><br><span class="line"><span class="code">	3.使用 th:value=&quot;$&#123;属性名&#125;&quot; 获取数据直接作为表单元素value属性</span></span><br></pre></td></tr></table></figure>

<h3 id="展示对象数据"><a href="#展示对象数据" class="headerlink" title="展示对象数据"></a>展示对象数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;user&quot;</span>,<span class="keyword">new</span> User(<span class="string">&quot;21&quot;</span>,<span class="string">&quot;xiaochen&quot;</span>,<span class="number">23</span>,<span class="keyword">new</span> Date()));</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">id:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">name:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">age:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">bir: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>  ====  <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.bir, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 日期格式化</span><br></pre></td></tr></table></figure>

<h3 id="条件展示数据"><a href="#条件展示数据" class="headerlink" title="条件展示数据"></a>条件展示数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;user&quot;</span>,<span class="keyword">new</span> User(<span class="string">&quot;21&quot;</span>,<span class="string">&quot;xiaochen&quot;</span>,<span class="number">23</span>,<span class="keyword">new</span> Date()));</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.age&#125; eq 23&quot;</span>&gt;</span></span><br><span class="line">  青年</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 运算符</span></span><br><span class="line"><span class="code">    gt：great than（大于）&gt;</span></span><br><span class="line"><span class="code">    ge：great equal（大于等于）&gt;=</span></span><br><span class="line"><span class="code">    eq：equal（等于）==</span></span><br><span class="line"><span class="code">    lt：less than（小于）&lt;</span></span><br><span class="line"><span class="code">    le：less equal（小于等于）&lt;=</span></span><br><span class="line"><span class="code">    ne：not equal（不等于）!=</span></span><br></pre></td></tr></table></figure>

<h3 id="展示多条数据"><a href="#展示多条数据" class="headerlink" title="展示多条数据"></a>展示多条数据</h3><ul>
<li>直接遍历集合</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; users = Arrays.asList(<span class="keyword">new</span> User(<span class="string">&quot;21&quot;</span>, <span class="string">&quot;demo1&quot;</span>, <span class="number">24</span>, <span class="keyword">new</span> Date()),</span><br><span class="line">                        <span class="keyword">new</span> User(<span class="string">&quot;21&quot;</span>, <span class="string">&quot;demo2&quot;</span>, <span class="number">25</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">model.addAttribute(<span class="string">&quot;users&quot;</span>, users);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.bir,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>遍历时获取遍历状态</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">&quot;user,userStat:$&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.count&#125;&quot;</span>/&gt;</span>-<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>   获取遍历次数  count 从1开始 index 从0开始</span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.odd&#125;&quot;</span>/&gt;</span>-<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>   获取当前遍历是否是奇数行</span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.even&#125;&quot;</span>/&gt;</span>-<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>   获取当前遍历是否是偶数行</span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.size&#125;&quot;</span>/&gt;</span>-<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>   获取当前集合的总条数</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h3><p><code>使用thymeleaf模板项目中静态资源默认放在resources路径小static目录中</code></p>
<ul>
<li>项目中放入对应静态资源</li>
</ul>
<p><img src="image-20200323142307411.png" alt="image-20200323142307411"></p>
<ul>
<li>页面中引入</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/index.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery-min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="springboot集成mybatis"><a href="#springboot集成mybatis" class="headerlink" title="springboot集成mybatis"></a>springboot集成mybatis</h1><h2 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--整合mybatis--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;1.3.3&lt;/version&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;dependency&gt;</span></span><br><span class="line"><span class="code">	&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">	&lt;artifactId&gt;druid&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">	&lt;version&gt;1.1.12&lt;/version&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;dependency&gt;</span></span><br><span class="line"><span class="code">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;5.1.38&lt;/version&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&gt;说明：由于springboot整合mybatis版本中默认依赖mybatis，因此不需要额外引入mybati版本，否则会出现冲突</span></span><br></pre></td></tr></table></figure>

<h2 id="配置配置文件"><a href="#配置配置文件" class="headerlink" title="配置配置文件"></a>配置配置文件</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">org.apache.commons.dbcp.BasicDataSource</span>   <span class="comment">#指定连接池类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>        <span class="comment">#指定驱动</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cmfz</span>           <span class="comment">#指定url</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span>									<span class="comment">#指定用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span>								 	<span class="comment">#指定密码</span></span><br></pre></td></tr></table></figure>

<h2 id="加入mybatis配置"><a href="#加入mybatis配置" class="headerlink" title="加入mybatis配置"></a>加入mybatis配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件中加入如下配置:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/baizhi/mapper/*.xml</span>  <span class="comment">#指定mapper配置文件位置</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.baizhi.entity</span>              <span class="comment">#指定起别名来的类</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入口类中加入如下配置:</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.baizhi.dao&quot;)</span>   <span class="comment">//必须在入口类中加入这个配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_clazz`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`no`</span> <span class="built_in">varchar</span>(<span class="number">90</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<h2 id="开发实体类"><a href="#开发实体类" class="headerlink" title="开发实体类"></a>开发实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clazz</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">    <span class="comment">//get set 方法省略....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="开发DAO接口以及Mapper"><a href="#开发DAO接口以及Mapper" class="headerlink" title="开发DAO接口以及Mapper"></a>开发DAO接口以及Mapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClazzDAO</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Clazz&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.baizhi.dao.ClazzDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Clazz&quot;</span>&gt;</span></span><br><span class="line">        select * from t_clazz </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="开发Service以及实现"><a href="#开发Service以及实现" class="headerlink" title="开发Service以及实现"></a>开发Service以及实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClazzService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Clazz&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClazzServiceImpl</span> <span class="keyword">implements</span>  <span class="title">ClazzService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ClazzDAO clazzDAO;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Clazz&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazzDAO.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-8-引入测试依赖"><a href="#11-8-引入测试依赖" class="headerlink" title="11.8 引入测试依赖"></a>11.8 引入测试依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = Application.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazzService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ClazzService clazzService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Clazz&gt; all = clazzService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Clazz clazz : all) &#123;</span><br><span class="line">            System.out.println(clazz);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="开启jsp页面热部署"><a href="#开启jsp页面热部署" class="headerlink" title="开启jsp页面热部署"></a>开启jsp页面热部署</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p><code>在springboot中默认对jsp运行为生产模式，不允许修改内容保存后立即生效，因此在开发过程需要调试jsp页面每次需要重新启动服务器这样极大影响了我们的效率，为此springboot中提供了可以将默认的生产模式修改为调试模式，改为调试模式后就可以保存立即生效，如何配置为测试模式需要在配置文件中加入如下配置即可修改为开发模式。</code></p>
</blockquote>
<h2 id="配置开启测试模式"><a href="#配置开启测试模式" class="headerlink" title="配置开启测试模式"></a>配置开启测试模式</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8989</span></span><br><span class="line">  <span class="attr">jsp-servlet:</span></span><br><span class="line">    <span class="attr">init-parameters:</span></span><br><span class="line">      <span class="attr">development:</span> <span class="literal">true</span>  <span class="comment">#开启jsp页面的调试模式</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="springboot中devtools热部署"><a href="#springboot中devtools热部署" class="headerlink" title="springboot中devtools热部署"></a>springboot中devtools热部署</h1><h2 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p><code>为了进一步提高开发效率，springboot为我们提供了全局项目热部署，日后在开发过程中修改了部分代码以及相关配置文件后，不需要每次重启使修改生效，在项目中开启了springboot全局热部署之后只需要在修改之后等待几秒即可使修改生效。</code></p>
</blockquote>
<h2 id="开启热部署"><a href="#开启热部署" class="headerlink" title="开启热部署"></a>开启热部署</h2><h3 id="项目中引入依赖-1"><a href="#项目中引入依赖-1" class="headerlink" title="项目中引入依赖"></a>项目中引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置idea中支持自动编译"><a href="#设置idea中支持自动编译" class="headerlink" title="设置idea中支持自动编译"></a>设置idea中支持自动编译</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.开启自动编译</span></span><br><span class="line"></span><br><span class="line"><span class="code">	Preferences | Build, Execution, Deployment | Compiler -&gt; 勾选上 Build project automatically 这个选项</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.开启允许在运行过程中修改文件</span></span><br><span class="line"><span class="code">	ctrl + alt + shift + / ----&gt;选择1.Registry ---&gt; 勾选 compiler.automake.allow.when.app.running 这个选项</span></span><br></pre></td></tr></table></figure>

<h3 id="启动项目检测热部署是否生效"><a href="#启动项目检测热部署是否生效" class="headerlink" title="启动项目检测热部署是否生效"></a>启动项目检测热部署是否生效</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.启动出现如下日志代表生效</span></span><br></pre></td></tr></table></figure>

<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">17</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span><span class="variable">.566</span>  INFO <span class="number">4496</span> --- [  restartedMain] com<span class="variable">.baizhi</span><span class="variable">.InitApplication</span>               : Starting InitApplication on chenyannandeMacBook-Pro<span class="variable">.local</span> <span class="keyword">with</span> PID <span class="number">4496</span> (/Users/chenyannan/IdeaProjects/ideacode/springboot_day1/target/classes started by chenyannan in /Users/chenyannan/IdeaProjects/ideacode/springboot_day1)</span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">17</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span><span class="variable">.567</span>  INFO <span class="number">4496</span> --- [  restartedMain] com<span class="variable">.baizhi</span><span class="variable">.InitApplication</span>               : The following profiles are active: dev</span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">17</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span><span class="variable">.612</span>  INFO <span class="number">4496</span> --- [  restartedMain] ationConfigEmbeddedWebApplicationContext : Refreshing org<span class="variable">.springframework</span><span class="variable">.boot</span><span class="variable">.context</span><span class="variable">.embedded</span><span class="variable">.AnnotationConfigEmbeddedWebApplicationContext</span>@<span class="number">66</span>d799c5: startup date [Wed Jul <span class="number">17</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> CST <span class="number">2019</span>]; root of <span class="keyword">context</span> hierarchy</span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">17</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">18</span><span class="variable">.782</span>  INFO <span class="number">4496</span> --- [  restartedMain] s<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.e</span><span class="variable">.t</span><span class="variable">.TomcatEmbeddedServletContainer</span> : Tomcat initialized <span class="keyword">with</span> port(s): <span class="number">8989</span> (http)</span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">17</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">18</span><span class="variable">.796</span>  INFO <span class="number">4496</span> --- [  restartedMain] o<span class="variable">.apache</span><span class="variable">.catalina</span><span class="variable">.core</span><span class="variable">.StandardService</span>   : Starting service [Tomcat]</span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">17</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">18</span><span class="variable">.797</span>  INFO <span class="number">4496</span> --- [  restartedMain] org<span class="variable">.apache</span><span class="variable">.catalina</span><span class="variable">.core</span><span class="variable">.StandardEngine</span>  : Starting Servlet Engine: Apache Tomcat/<span class="number">8</span><span class="variable">.5</span><span class="variable">.20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>注意:日志出现restartedMain代表已经生效，在使用热部署时如果遇到修改之后不能生效，请重试重启项目再试</code></p>
</blockquote>
<h1 id="logback日志的集成"><a href="#logback日志的集成" class="headerlink" title="logback日志的集成"></a>logback日志的集成</h1><h2 id="logback简介"><a href="#logback简介" class="headerlink" title="logback简介"></a>logback简介</h2><blockquote>
<p>Logback是由 <a href="https://baike.baidu.com/item/log4j/480673">log4j</a> 创始人设计的又一个开源日志组件。目前，logback分为三个模块：logback-core，logback-classic和logback-access，是对log4j日志展示进一步改进。</p>
</blockquote>
<h2 id="日志的级别"><a href="#日志的级别" class="headerlink" title="日志的级别"></a>日志的级别</h2><blockquote>
<p>DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; OFF</p>
<p>日志级别由低到高:  <code>日志级别越高输出的日志信息越少</code></p>
</blockquote>
<h2 id="项目中日志分类"><a href="#项目中日志分类" class="headerlink" title="项目中日志分类"></a>项目中日志分类</h2><blockquote>
<p>日志分为两类</p>
<p> 一种是rootLogger :     用来监听项目中所有的运行日志，包括引入依赖jar中的日志 </p>
<p> 一种是logger :            用来监听项目中指定包中的日志信息</p>
</blockquote>
<h2 id="java项目中使用"><a href="#java项目中使用" class="headerlink" title="java项目中使用"></a>java项目中使用</h2><h3 id="logback配置文件"><a href="#logback配置文件" class="headerlink" title="logback配置文件"></a>logback配置文件</h3><blockquote>
<p>logback的配置文件必须放在项目根目录中，且名字必须为logback.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义项目中日志输出位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;stdout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义项目的日志输出格式--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义项目的日志输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span> [%p] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %m %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--项目中跟日志控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;stdout&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目中指定包日志控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.baizhi.dao&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="具体类中使用日志"><a href="#具体类中使用日志" class="headerlink" title="具体类中使用日志"></a>具体类中使用日志</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明日志成员</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(HelloController.class);</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======hello world=======&quot;</span>);</span><br><span class="line">        logger.debug(<span class="string">&quot;DEBUG&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;INFO&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;WARN&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用默认日志配置"><a href="#使用默认日志配置" class="headerlink" title="使用默认日志配置"></a>使用默认日志配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">com.baizhi.dao:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/Users/chenyannan/aa.log</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">bbb.log</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="切面编程"><a href="#切面编程" class="headerlink" title="切面编程"></a>切面编程</h1><h2 id="引言-2"><a href="#引言-2" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p>springboot是对原有项目中spring框架和springmvc的进一步封装，因此在springboot中同样支持spring框架中AOP切面编程，不过在springboot中为了快速开发仅仅提供了注解方式的切面编程。</p>
</blockquote>
<p><img src="image-20200327115039033.png" alt="image-20200327115039033"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Aspect</span> 用来类上，代表这个类是一个切面</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Before</span> 用在方法上代表这个方法是一个前置通知方法 </span></span><br><span class="line"><span class="comment">    <span class="doctag">@After</span> 用在方法上代表这个方法是一个后置通知方法 <span class="doctag">@Around</span> 用在方法上代表这个方法是一个环绕的方法</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Around</span> 用在方法上代表这个方法是一个环绕的方法</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

<h3 id="前置切面"><a href="#前置切面" class="headerlink" title="前置切面"></a>前置切面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">        joinPoint.getTarget();	<span class="comment">//目标对象</span></span><br><span class="line">        joinPoint.getSignature();	<span class="comment">//方法签名</span></span><br><span class="line">        joinPoint.getArgs();	<span class="comment">//方法参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="后置切面"><a href="#后置切面" class="headerlink" title="后置切面"></a>后置切面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">        joinPoint.getTarget();	<span class="comment">//目标对象</span></span><br><span class="line">        joinPoint.getSignature();	<span class="comment">//方法签名</span></span><br><span class="line">        joinPoint.getArgs();	<span class="comment">//方法参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意: 前置通知和后置通知都没有返回值,方法参数都为joinpoint</strong></p>
</blockquote>
<h3 id="环绕切面"><a href="#环绕切面" class="headerlink" title="环绕切面"></a>环绕切面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">before</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入环绕通知&quot;</span>);</span><br><span class="line">        proceedingJoinPoint.getTarget();	<span class="comment">//目标对象</span></span><br><span class="line">        proceedingJoinPoint.getSignature();	<span class="comment">//方法签名</span></span><br><span class="line">        proceedingJoinPoint.getArgs();	<span class="comment">//方法参数</span></span><br><span class="line">        Object proceed = proceedingJoinPoint.proceed();	<span class="comment">//放行执行目标方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行之后回到环绕通知&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;	<span class="comment">//返回目标方法返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>注意: 环绕通知存在返回值，参数为ProceedingJoinPoint，如果执行放行，不会执行目标方法，一旦放行必须将目标方法的返回值返回，否则调用者无法接受返回数据</code></strong></p>
</blockquote>
<hr>
<h1 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>定义：<code>用户访问当前系统，将自己本地计算机中文件通过浏览器上传到当前系统所在的服务器过程中称之为文件的上传</code></p>
<h3 id="准备上传页面"><a href="#准备上传页面" class="headerlink" title="准备上传页面"></a>准备上传页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;路径....&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	1. 表单提交方式必须是post</span></span><br><span class="line"><span class="comment">	2. 表单的enctype属性必须为multipart/form-data</span></span><br><span class="line"><span class="comment">	3. 后台接受变量名字要与文件选择name属性一致</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile aa, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String realPath = request.getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        aa.transferTo(<span class="keyword">new</span> File(realPath,aa.getOriginalFilename()));	<span class="comment">//文件上传</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改文件上传大小"><a href="#修改文件上传大小" class="headerlink" title="修改文件上传大小"></a>修改文件上传大小</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#上传时出现如下异常： 上传文件的大小超出默认配置  默认10M</span></span><br><span class="line"><span class="attr">nested exception is java.lang.IllegalStateException:</span> <span class="string">org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException:</span> <span class="string">the</span> <span class="string">request</span> <span class="string">was</span> <span class="string">rejected</span> <span class="string">because</span> <span class="string">its</span> <span class="string">size</span> <span class="string">(38443713)</span> <span class="string">exceeds</span> <span class="string">the</span> <span class="string">configured</span> <span class="string">maximum</span> <span class="string">(10485760)</span></span><br><span class="line"><span class="comment">#修改上传文件大小:</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">       <span class="attr">max-request-size:</span> <span class="number">209715200</span>	<span class="comment">#用来控制文件上传大小的限制</span></span><br><span class="line">       <span class="attr">max-file-size:</span> <span class="number">209715200</span>		<span class="comment">#用来指定服务端最大文件大小   </span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.servlet.multipart.max-file-size=500MB</span></span><br><span class="line"><span class="string">spring.servlet.multipart.max-request-size=500MB</span></span><br></pre></td></tr></table></figure>

<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="提供下载文件链接"><a href="#提供下载文件链接" class="headerlink" title="提供下载文件链接"></a>提供下载文件链接</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../file/download?fileName=corejava.txt&quot;</span>&gt;</span>corejava.txt<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="开发控制器"><a href="#开发控制器" class="headerlink" title="开发控制器"></a>开发控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String fileName, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String realPath = request.getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        FileInputStream is = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(realPath, fileName));</span><br><span class="line">        ServletOutputStream os = response.getOutputStream();</span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        IOUtils.copy(is,os);</span><br><span class="line">        IOUtils.closeQuietly(is);</span><br><span class="line">        IOUtils.closeQuietly(os);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h2 id="开发拦截器"><a href="#开发拦截器" class="headerlink" title="开发拦截器"></a>开发拦截器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======1=====&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;	<span class="comment">//返回true放行  返回false阻止</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====2=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====3=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.x中拦截器配置</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>)	            <span class="comment">//定义拦截路径</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/hello/**&quot;</span>);	    <span class="comment">//排除拦截路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.x中拦截器配置</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor())	<span class="comment">//添加拦截器</span></span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/hello/**&quot;</span>)	        <span class="comment">//添加拦截的请求路径</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/hello/world&quot;</span>);	<span class="comment">//添加排除那些请求路径不经过拦截器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意:在springboot2.x版本中自定义拦截器之后出现项目中静态资源404情况，需要在自定义拦截器的配置中加入如下配置即可:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/file/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/files/**&quot;</span>);	<span class="comment">//放行静态资源 静态资源被认为是一个控制器请求</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//springboot2.x 静态资源在自定义拦截器之后无法访问的解决方案</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>) <span class="comment">//代表以什么样的请求路径访问静态资源</span></span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/static/&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/templates/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="war包部署"><a href="#war包部署" class="headerlink" title="war包部署"></a>war包部署</h1><h2 id="设置打包方式为war"><a href="#设置打包方式为war" class="headerlink" title="设置打包方式为war"></a>设置打包方式为war</h2><blockquote>
<p><packaging>war</packaging></p>
</blockquote>
<h2 id="在插件中指定入口类"><a href="#在插件中指定入口类" class="headerlink" title="在插件中指定入口类"></a>在插件中指定入口类</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用热部署出现中文乱码解决方案 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 增加jvm参数 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span>-Dfile.encoding=UTF-8<span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 指定入口类 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.baizhi.Application<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span>	</span><br></pre></td></tr></table></figure>

<h2 id="排除内嵌的tomcat"><a href="#排除内嵌的tomcat" class="headerlink" title="排除内嵌的tomcat"></a>排除内嵌的tomcat</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>   <span class="comment">&lt;!-- 去掉内嵌tomcat --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  <span class="comment">&lt;!-- 去掉使用内嵌tomcat解析jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置入口类"><a href="#配置入口类" class="headerlink" title="配置入口类"></a>配置入口类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.继承SpringBootServletInitializer</span></span><br><span class="line"><span class="comment">//2.覆盖configure方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 一旦使用war包部署注意：</span></span><br><span class="line"><span class="comment">	1. application.yml 中配置port context-path 失效</span></span><br><span class="line"><span class="comment">	2. 访问时使用打成war包的名字和外部tomcat端口号进行访问项目</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringMVC</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
</search>
